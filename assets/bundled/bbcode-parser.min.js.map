{"version":3,"file":"bbcode-parser.min.js","sources":["../../node_modules/@bbob/plugin-helper/es/char.js","../../node_modules/@bbob/plugin-helper/es/helpers.js","../../node_modules/@bbob/plugin-helper/es/TagNode.js","../../node_modules/@bbob/parser/es/Token.js","../../node_modules/@bbob/parser/es/utils.js","../../node_modules/@bbob/parser/es/lexer.js","../../node_modules/@bbob/parser/es/parse.js","../../node_modules/@bbob/core/es/utils.js","../../node_modules/@bbob/core/es/errors.js","../../node_modules/@bbob/core/es/index.js","../../node_modules/@bbob/html/node_modules/@bbob/core/es/errors.js","../../node_modules/@bbob/html/es/index.js","../../bbcode-src/utils/common.js","../../bbcode-src/plugins/lineBreak.js","../../bbcode-src/plugins/preserveWhitespace.js","../../node_modules/@bbob/preset/es/preset.js","../../bbcode-src/tags/alignment.js","../../bbcode-src/tags/anchor.js","../../bbcode-src/tags/font.js","../../bbcode-src/tags/heightrestrict.js","../../bbcode-src/tags/mail.js","../../bbcode-src/tags/rowcolumn.js","../../bbcode-src/tags/size.js","../../bbcode-src/tags/textmessage.js","../../bbcode-src/tags/accordion.js","../../bbcode-src/tags/script.js","../../bbcode-src/preset.js","../../bbcode-src/tags/animation.js","../../bbcode-src/tags/background.js","../../bbcode-src/tags/block.js","../../bbcode-src/tags/blockquote.js","../../bbcode-src/tags/border.js","../../bbcode-src/tags/lineBreak.js","../../bbcode-src/tags/centerblock.js","../../bbcode-src/tags/check.js","../../bbcode-src/tags/class.js","../../bbcode-src/tags/code.js","../../bbcode-src/tags/color.js","../../bbcode-src/tags/comment.js","../../bbcode-src/tags/div.js","../../bbcode-src/tags/divide.js","../../bbcode-src/tags/fieldset.js","../../bbcode-src/tags/header.js","../../bbcode-src/tags/highlight.js","../../bbcode-src/tags/imagefloat.js","../../bbcode-src/tags/spoiler.js","../../bbcode-src/tags/justify.js","../../bbcode-src/tags/newspaper.js","../../bbcode-src/tags/note.js","../../bbcode-src/tags/ooc.js","../../bbcode-src/tags/pindent.js","../../bbcode-src/tags/plain.js","../../bbcode-src/tags/print.js","../../bbcode-src/tags/progress.js","../../bbcode-src/tags/thinprogress.js","../../bbcode-src/tags/scroll.js","../../bbcode-src/tags/side.js","../../bbcode-src/tags/subscript.js","../../bbcode-src/tags/superscript.js","../../bbcode-src/tags/tabs.js","../../bbcode-src/tags/discourse-core-replacement.js","../../bbcode-src/utils/postprocess.js","../../bbcode-src/utils/preprocess.js","../../bbcode-src/index.js"],"sourcesContent":["const N = '\\n';\nconst TAB = '\\t';\nconst F = '\\f';\nconst R = '\\r';\nconst EQ = '=';\nconst QUOTEMARK = '\"';\nconst SPACE = ' ';\nconst OPEN_BRAKET = '[';\nconst CLOSE_BRAKET = ']';\nconst SLASH = '/';\nconst BACKSLASH = '\\\\';\nexport { N, F, R, EQ, TAB, SPACE, SLASH, BACKSLASH, QUOTEMARK, OPEN_BRAKET, CLOSE_BRAKET };\n","import { N } from './char';\nfunction isTagNode(el) {\n    return typeof el === 'object' && el !== null && 'tag' in el;\n}\nfunction isStringNode(el) {\n    return typeof el === 'string';\n}\n// check string is end of line\nfunction isEOL(el) {\n    return el === N;\n}\nfunction keysReduce(obj, reduce, def) {\n    const keys = Object.keys(obj);\n    return keys.reduce((acc, key)=>reduce(acc, key, obj), def);\n}\nfunction getNodeLength(node) {\n    if (isTagNode(node) && Array.isArray(node.content)) {\n        return node.content.reduce((count, contentNode)=>{\n            return count + getNodeLength(contentNode);\n        }, 0);\n    }\n    if (isStringNode(node)) {\n        return String(node).length;\n    }\n    return 0;\n}\nfunction appendToNode(node, value) {\n    if (Array.isArray(node.content)) {\n        node.content.push(value);\n    }\n}\n/**\n * Replaces \" to &qquot;\n * @param {string} value\n */ function escapeAttrValue(value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;')// eslint-disable-next-line no-script-url\n    .replace(/(javascript|data|vbscript):/gi, '$1%3A');\n}\n/**\n * @deprecated use escapeAttrValue\n */ const escapeHTML = escapeAttrValue;\n/**\n * Accept name and value and return valid html5 attribute string\n */ function attrValue(name, value) {\n    // in case of performance\n    switch(typeof value){\n        case 'boolean':\n            return value ? `${name}` : '';\n        case 'number':\n            return `${name}=\"${value}\"`;\n        case 'string':\n            return `${name}=\"${escapeAttrValue(value)}\"`;\n        case 'object':\n            return `${name}=\"${escapeAttrValue(JSON.stringify(value))}\"`;\n        default:\n            return '';\n    }\n}\n/**\n * Transforms attrs to html params string\n * @example\n * attrsToString({ 'foo': true, 'bar': bar' }) => 'foo=\"true\" bar=\"bar\"'\n */ function attrsToString(values) {\n    // To avoid some malformed attributes\n    if (values == null) {\n        return '';\n    }\n    return keysReduce(values, (arr, key, obj)=>[\n            ...arr,\n            attrValue(key, obj[key])\n        ], [\n        ''\n    ]).join(' ');\n}\n/**\n * Gets value from\n * @example\n * getUniqAttr({ 'foo': true, 'bar': bar' }) => 'bar'\n */ function getUniqAttr(attrs) {\n    return keysReduce(attrs || {}, (res, key, obj)=>obj[key] === key ? obj[key] : null, null);\n}\nexport { attrsToString, attrValue, appendToNode, escapeHTML, escapeAttrValue, getNodeLength, getUniqAttr, isTagNode, isStringNode, isEOL };\n","import { OPEN_BRAKET, CLOSE_BRAKET, SLASH } from './char';\nimport { getUniqAttr, getNodeLength, appendToNode, attrsToString, attrValue, isTagNode } from './helpers';\nconst getTagAttrs = (tag, params)=>{\n    const uniqAttr = getUniqAttr(params);\n    if (uniqAttr) {\n        const tagAttr = attrValue(tag, uniqAttr);\n        const attrs = {\n            ...params\n        };\n        delete attrs[String(uniqAttr)];\n        const attrsStr = attrsToString(attrs);\n        return `${tagAttr}${attrsStr}`;\n    }\n    return `${tag}${attrsToString(params)}`;\n};\nconst renderContent = (content, openTag, closeTag)=>{\n    const toString = (node)=>{\n        if (isTagNode(node)) {\n            return node.toString({\n                openTag,\n                closeTag\n            });\n        }\n        return String(node);\n    };\n    if (Array.isArray(content)) {\n        return content.reduce((r, node)=>{\n            if (node !== null) {\n                return r + toString(node);\n            }\n            return r;\n        }, '');\n    }\n    if (content) {\n        return toString(content);\n    }\n    return null;\n};\nexport class TagNode {\n    attr(name, value) {\n        if (typeof value !== 'undefined') {\n            this.attrs[name] = value;\n        }\n        return this.attrs[name];\n    }\n    append(value) {\n        return appendToNode(this, value);\n    }\n    get length() {\n        return getNodeLength(this);\n    }\n    toTagStart({ openTag = OPEN_BRAKET, closeTag = CLOSE_BRAKET } = {}) {\n        const tagAttrs = getTagAttrs(this.tag, this.attrs);\n        return `${openTag}${tagAttrs}${closeTag}`;\n    }\n    toTagEnd({ openTag = OPEN_BRAKET, closeTag = CLOSE_BRAKET } = {}) {\n        return `${openTag}${SLASH}${this.tag}${closeTag}`;\n    }\n    toTagNode() {\n        return new TagNode(this.tag.toLowerCase(), this.attrs, this.content);\n    }\n    toString({ openTag = OPEN_BRAKET, closeTag = CLOSE_BRAKET } = {}) {\n        const content = this.content ? renderContent(this.content, openTag, closeTag) : '';\n        const tagStart = this.toTagStart({\n            openTag,\n            closeTag\n        });\n        if (this.content === null || Array.isArray(this.content) && this.content.length === 0) {\n            return tagStart;\n        }\n        return `${tagStart}${content}${this.toTagEnd({\n            openTag,\n            closeTag\n        })}`;\n    }\n    static create(tag, attrs = {}, content = null) {\n        return new TagNode(tag, attrs, content);\n    }\n    static isOf(node, type) {\n        return node.tag === type;\n    }\n    constructor(tag, attrs, content){\n        this.tag = tag;\n        this.attrs = attrs;\n        this.content = content;\n    }\n}\n","import { OPEN_BRAKET, CLOSE_BRAKET, SLASH } from '@bbob/plugin-helper';\n// type, value, line, row,\nconst TOKEN_TYPE_ID = 't'; // 0;\nconst TOKEN_VALUE_ID = 'v'; // 1;\nconst TOKEN_COLUMN_ID = 'r'; // 2;\nconst TOKEN_LINE_ID = 'l'; // 3;\nconst TOKEN_TYPE_WORD = 1; // 'word';\nconst TOKEN_TYPE_TAG = 2; // 'tag';\nconst TOKEN_TYPE_ATTR_NAME = 3; // 'attr-name';\nconst TOKEN_TYPE_ATTR_VALUE = 4; // 'attr-value';\nconst TOKEN_TYPE_SPACE = 5; // 'space';\nconst TOKEN_TYPE_NEW_LINE = 6; // 'new-line';\nconst getTokenValue = (token)=>{\n    if (token && typeof token[TOKEN_VALUE_ID] !== 'undefined') {\n        return token[TOKEN_VALUE_ID];\n    }\n    return '';\n};\nconst getTokenLine = (token)=>token && token[TOKEN_LINE_ID] || 0;\nconst getTokenColumn = (token)=>token && token[TOKEN_COLUMN_ID] || 0;\nconst isTextToken = (token)=>{\n    if (token && typeof token[TOKEN_TYPE_ID] !== 'undefined') {\n        return token[TOKEN_TYPE_ID] === TOKEN_TYPE_SPACE || token[TOKEN_TYPE_ID] === TOKEN_TYPE_NEW_LINE || token[TOKEN_TYPE_ID] === TOKEN_TYPE_WORD;\n    }\n    return false;\n};\nconst isTagToken = (token)=>{\n    if (token && typeof token[TOKEN_TYPE_ID] !== 'undefined') {\n        return token[TOKEN_TYPE_ID] === TOKEN_TYPE_TAG;\n    }\n    return false;\n};\nconst isTagEnd = (token)=>getTokenValue(token).charCodeAt(0) === SLASH.charCodeAt(0);\nconst isTagStart = (token)=>!isTagEnd(token);\nconst isAttrNameToken = (token)=>{\n    if (token && typeof token[TOKEN_TYPE_ID] !== 'undefined') {\n        return token[TOKEN_TYPE_ID] === TOKEN_TYPE_ATTR_NAME;\n    }\n    return false;\n};\nconst isAttrValueToken = (token)=>{\n    if (token && typeof token[TOKEN_TYPE_ID] !== 'undefined') {\n        return token[TOKEN_TYPE_ID] === TOKEN_TYPE_ATTR_VALUE;\n    }\n    return false;\n};\nconst getTagName = (token)=>{\n    const value = getTokenValue(token);\n    return isTagEnd(token) ? value.slice(1) : value;\n};\nconst tokenToText = (token)=>{\n    let text = OPEN_BRAKET;\n    text += getTokenValue(token);\n    text += CLOSE_BRAKET;\n    return text;\n};\n/**\n * @export\n * @class Token\n */ class Token {\n    get type() {\n        return this[TOKEN_TYPE_ID];\n    }\n    isEmpty() {\n        return this[TOKEN_TYPE_ID] === 0 || isNaN(this[TOKEN_TYPE_ID]);\n    }\n    isText() {\n        return isTextToken(this);\n    }\n    isTag() {\n        return isTagToken(this);\n    }\n    isAttrName() {\n        return isAttrNameToken(this);\n    }\n    isAttrValue() {\n        return isAttrValueToken(this);\n    }\n    isStart() {\n        return isTagStart(this);\n    }\n    isEnd() {\n        return isTagEnd(this);\n    }\n    getName() {\n        return getTagName(this);\n    }\n    getValue() {\n        return getTokenValue(this);\n    }\n    getLine() {\n        return getTokenLine(this);\n    }\n    getColumn() {\n        return getTokenColumn(this);\n    }\n    toString() {\n        return tokenToText(this);\n    }\n    constructor(type, value, row = 0, col = 0){\n        this[TOKEN_LINE_ID] = row;\n        this[TOKEN_COLUMN_ID] = col;\n        this[TOKEN_TYPE_ID] = type || 0;\n        this[TOKEN_VALUE_ID] = String(value);\n    }\n}\nexport const TYPE_ID = TOKEN_TYPE_ID;\nexport const VALUE_ID = TOKEN_VALUE_ID;\nexport const LINE_ID = TOKEN_LINE_ID;\nexport const COLUMN_ID = TOKEN_COLUMN_ID;\nexport const TYPE_WORD = TOKEN_TYPE_WORD;\nexport const TYPE_TAG = TOKEN_TYPE_TAG;\nexport const TYPE_ATTR_NAME = TOKEN_TYPE_ATTR_NAME;\nexport const TYPE_ATTR_VALUE = TOKEN_TYPE_ATTR_VALUE;\nexport const TYPE_SPACE = TOKEN_TYPE_SPACE;\nexport const TYPE_NEW_LINE = TOKEN_TYPE_NEW_LINE;\nexport { Token };\nexport default Token;\n","import { QUOTEMARK, BACKSLASH } from '@bbob/plugin-helper';\nexport class CharGrabber {\n    skip(num = 1, silent) {\n        this.c.pos += num;\n        if (this.o && this.o.onSkip && !silent) {\n            this.o.onSkip();\n        }\n    }\n    hasNext() {\n        return this.c.len > this.c.pos;\n    }\n    getCurr() {\n        if (typeof this.s[this.c.pos] === 'undefined') {\n            return '';\n        }\n        return this.s[this.c.pos];\n    }\n    getRest() {\n        return this.s.substring(this.c.pos);\n    }\n    getNext() {\n        const nextPos = this.c.pos + 1;\n        return nextPos <= this.s.length - 1 ? this.s[nextPos] : null;\n    }\n    getPrev() {\n        const prevPos = this.c.pos - 1;\n        if (typeof this.s[prevPos] === 'undefined') {\n            return null;\n        }\n        return this.s[prevPos];\n    }\n    isLast() {\n        return this.c.pos === this.c.len;\n    }\n    includes(val) {\n        return this.s.indexOf(val, this.c.pos) >= 0;\n    }\n    grabWhile(condition, silent) {\n        let start = 0;\n        if (this.hasNext()) {\n            start = this.c.pos;\n            while(this.hasNext() && condition(this.getCurr())){\n                this.skip(1, silent);\n            }\n        }\n        return this.s.substring(start, this.c.pos);\n    }\n    grabN(num = 0) {\n        return this.s.substring(this.c.pos, this.c.pos + num);\n    }\n    /**\n   * Grabs rest of string until it find a char\n   */ substrUntilChar(char) {\n        const { pos } = this.c;\n        const idx = this.s.indexOf(char, pos);\n        return idx >= 0 ? this.s.substring(pos, idx) : '';\n    }\n    constructor(source, options = {}){\n        this.s = source;\n        this.c = {\n            pos: 0,\n            len: source.length\n        };\n        this.o = options;\n    }\n}\n/**\n * Creates a grabber wrapper for source string, that helps to iterate over string char by char\n */ export const createCharGrabber = (source, options)=>new CharGrabber(source, options);\n/**\n * Trims string from start and end by char\n * @example\n *  trimChar('*hello*', '*') ==> 'hello'\n */ export const trimChar = (str, charToRemove)=>{\n    while(str.charAt(0) === charToRemove){\n        // eslint-disable-next-line no-param-reassign\n        str = str.substring(1);\n    }\n    while(str.charAt(str.length - 1) === charToRemove){\n        // eslint-disable-next-line no-param-reassign\n        str = str.substring(0, str.length - 1);\n    }\n    return str;\n};\n/**\n * Unquotes \\\" to \"\n */ export const unquote = (str)=>str.replace(BACKSLASH + QUOTEMARK, QUOTEMARK);\n","/* eslint-disable no-plusplus,no-param-reassign */ import { OPEN_BRAKET, CLOSE_BRAKET, QUOTEMARK, BACKSLASH, SLASH, SPACE, TAB, EQ, N } from '@bbob/plugin-helper';\nimport { Token, TYPE_ATTR_NAME, TYPE_ATTR_VALUE, TYPE_NEW_LINE, TYPE_SPACE, TYPE_TAG, TYPE_WORD } from './Token';\nimport { createCharGrabber, trimChar, unquote } from './utils';\n// for cases <!-- -->\nconst EM = '!';\nexport function createTokenOfType(type, value, r = 0, cl = 0) {\n    return new Token(type, value, r, cl);\n}\nconst STATE_WORD = 0;\nconst STATE_TAG = 1;\nconst STATE_TAG_ATTRS = 2;\nconst TAG_STATE_NAME = 0;\nconst TAG_STATE_ATTR = 1;\nconst TAG_STATE_VALUE = 2;\nconst WHITESPACES = [\n    SPACE,\n    TAB\n];\nconst SPECIAL_CHARS = [\n    EQ,\n    SPACE,\n    TAB\n];\nconst isWhiteSpace = (char)=>WHITESPACES.indexOf(char) >= 0;\nconst isEscapeChar = (char)=>char === BACKSLASH;\nconst isSpecialChar = (char)=>SPECIAL_CHARS.indexOf(char) >= 0;\nconst isNewLine = (char)=>char === N;\nconst unq = (val)=>unquote(trimChar(val, QUOTEMARK));\nexport function createLexer(buffer, options = {}) {\n    let row = 0;\n    let col = 0;\n    let tokenIndex = -1;\n    let stateMode = STATE_WORD;\n    let tagMode = TAG_STATE_NAME;\n    let contextFreeTag = '';\n    const tokens = new Array(Math.floor(buffer.length));\n    const openTag = options.openTag || OPEN_BRAKET;\n    const closeTag = options.closeTag || CLOSE_BRAKET;\n    const escapeTags = !!options.enableEscapeTags;\n    const contextFreeTags = (options.contextFreeTags || []).filter(Boolean).map((tag)=>tag.toLowerCase());\n    const nestedMap = new Map();\n    const onToken = options.onToken || (()=>{});\n    const RESERVED_CHARS = [\n        closeTag,\n        openTag,\n        QUOTEMARK,\n        BACKSLASH,\n        SPACE,\n        TAB,\n        EQ,\n        N,\n        EM\n    ];\n    const NOT_CHAR_TOKENS = [\n        openTag,\n        SPACE,\n        TAB,\n        N\n    ];\n    const isCharReserved = (char)=>RESERVED_CHARS.indexOf(char) >= 0;\n    const isCharToken = (char)=>NOT_CHAR_TOKENS.indexOf(char) === -1;\n    const isEscapableChar = (char)=>char === openTag || char === closeTag || char === BACKSLASH;\n    const onSkip = ()=>{\n        col++;\n    };\n    const checkContextFreeMode = (name, isClosingTag)=>{\n        if (contextFreeTag !== '' && isClosingTag) {\n            contextFreeTag = '';\n        }\n        if (contextFreeTag === '' && contextFreeTags.includes(name.toLowerCase())) {\n            contextFreeTag = name;\n        }\n    };\n    const chars = createCharGrabber(buffer, {\n        onSkip\n    });\n    /**\n   * Emits newly created token to subscriber\n   * @param {Number} type\n   * @param {String} value\n   */ function emitToken(type, value) {\n        const token = createTokenOfType(type, value, row, col);\n        onToken(token);\n        tokenIndex += 1;\n        tokens[tokenIndex] = token;\n    }\n    function nextTagState(tagChars, isSingleValueTag) {\n        if (tagMode === TAG_STATE_ATTR) {\n            const validAttrName = (char)=>!(char === EQ || isWhiteSpace(char));\n            const name = tagChars.grabWhile(validAttrName);\n            const isEnd = tagChars.isLast();\n            const isValue = tagChars.getCurr() !== EQ;\n            tagChars.skip();\n            if (isEnd || isValue) {\n                emitToken(TYPE_ATTR_VALUE, unq(name));\n            } else {\n                emitToken(TYPE_ATTR_NAME, name);\n            }\n            if (isEnd) {\n                return TAG_STATE_NAME;\n            }\n            if (isValue) {\n                return TAG_STATE_ATTR;\n            }\n            return TAG_STATE_VALUE;\n        }\n        if (tagMode === TAG_STATE_VALUE) {\n            let stateSpecial = false;\n            const validAttrValue = (char)=>{\n                // const isEQ = char === EQ;\n                const isQM = char === QUOTEMARK;\n                const prevChar = tagChars.getPrev();\n                const nextChar = tagChars.getNext();\n                const isPrevSLASH = prevChar === BACKSLASH;\n                const isNextEQ = nextChar === EQ;\n                const isWS = isWhiteSpace(char);\n                // const isPrevWS = isWhiteSpace(prevChar);\n                const isNextWS = nextChar && isWhiteSpace(nextChar);\n                if (stateSpecial && isSpecialChar(char)) {\n                    return true;\n                }\n                if (isQM && !isPrevSLASH) {\n                    stateSpecial = !stateSpecial;\n                    if (!stateSpecial && !(isNextEQ || isNextWS)) {\n                        return false;\n                    }\n                }\n                if (!isSingleValueTag) {\n                    return !isWS;\n                // return (isEQ || isWS) === false;\n                }\n                return true;\n            };\n            const name = tagChars.grabWhile(validAttrValue);\n            tagChars.skip();\n            emitToken(TYPE_ATTR_VALUE, unq(name));\n            if (tagChars.isLast()) {\n                return TAG_STATE_NAME;\n            }\n            return TAG_STATE_ATTR;\n        }\n        const validName = (char)=>!(char === EQ || isWhiteSpace(char) || tagChars.isLast());\n        const name = tagChars.grabWhile(validName);\n        emitToken(TYPE_TAG, name);\n        checkContextFreeMode(name);\n        tagChars.skip();\n        // in cases when we has [url=someval]GET[/url] and we dont need to parse all\n        if (isSingleValueTag) {\n            return TAG_STATE_VALUE;\n        }\n        const hasEQ = tagChars.includes(EQ);\n        return hasEQ ? TAG_STATE_ATTR : TAG_STATE_VALUE;\n    }\n    function stateTag() {\n        const currChar = chars.getCurr();\n        const nextChar = chars.getNext();\n        chars.skip();\n        // detect case where we have '[My word [tag][/tag]' or we have '[My last line word'\n        const substr = chars.substrUntilChar(closeTag);\n        const hasInvalidChars = substr.length === 0 || substr.indexOf(openTag) >= 0;\n        if (nextChar && isCharReserved(nextChar) || hasInvalidChars || chars.isLast()) {\n            emitToken(TYPE_WORD, currChar);\n            return STATE_WORD;\n        }\n        // [myTag   ]\n        const isNoAttrsInTag = substr.indexOf(EQ) === -1;\n        // [/myTag]\n        const isClosingTag = substr[0] === SLASH;\n        if (isNoAttrsInTag || isClosingTag) {\n            const name = chars.grabWhile((char)=>char !== closeTag);\n            chars.skip(); // skip closeTag\n            emitToken(TYPE_TAG, name);\n            checkContextFreeMode(name, isClosingTag);\n            return STATE_WORD;\n        }\n        return STATE_TAG_ATTRS;\n    }\n    function stateAttrs() {\n        const silent = true;\n        const tagStr = chars.grabWhile((char)=>char !== closeTag, silent);\n        const tagGrabber = createCharGrabber(tagStr, {\n            onSkip\n        });\n        const hasSpace = tagGrabber.includes(SPACE);\n        tagMode = TAG_STATE_NAME;\n        while(tagGrabber.hasNext()){\n            tagMode = nextTagState(tagGrabber, !hasSpace);\n        }\n        chars.skip(); // skip closeTag\n        return STATE_WORD;\n    }\n    function stateWord() {\n        if (isNewLine(chars.getCurr())) {\n            emitToken(TYPE_NEW_LINE, chars.getCurr());\n            chars.skip();\n            col = 0;\n            row++;\n            return STATE_WORD;\n        }\n        if (isWhiteSpace(chars.getCurr())) {\n            const word = chars.grabWhile(isWhiteSpace);\n            emitToken(TYPE_SPACE, word);\n            return STATE_WORD;\n        }\n        if (chars.getCurr() === openTag) {\n            if (contextFreeTag) {\n                const fullTagLen = openTag.length + SLASH.length + contextFreeTag.length;\n                const fullTagName = `${openTag}${SLASH}${contextFreeTag}`;\n                const foundTag = chars.grabN(fullTagLen);\n                const isEndContextFreeMode = foundTag === fullTagName;\n                if (isEndContextFreeMode) {\n                    return STATE_TAG;\n                }\n            } else if (chars.includes(closeTag)) {\n                return STATE_TAG;\n            }\n            emitToken(TYPE_WORD, chars.getCurr());\n            chars.skip();\n            return STATE_WORD;\n        }\n        if (escapeTags) {\n            if (isEscapeChar(chars.getCurr())) {\n                const currChar = chars.getCurr();\n                const nextChar = chars.getNext();\n                chars.skip(); // skip the \\ without emitting anything\n                if (nextChar && isEscapableChar(nextChar)) {\n                    chars.skip(); // skip past the [, ] or \\ as well\n                    emitToken(TYPE_WORD, nextChar);\n                    return STATE_WORD;\n                }\n                emitToken(TYPE_WORD, currChar);\n                return STATE_WORD;\n            }\n            const isChar = (char)=>isCharToken(char) && !isEscapeChar(char);\n            const word = chars.grabWhile(isChar);\n            emitToken(TYPE_WORD, word);\n            return STATE_WORD;\n        }\n        const word = chars.grabWhile(isCharToken);\n        emitToken(TYPE_WORD, word);\n        return STATE_WORD;\n    }\n    function tokenize() {\n        stateMode = STATE_WORD;\n        while(chars.hasNext()){\n            switch(stateMode){\n                case STATE_TAG:\n                    stateMode = stateTag();\n                    break;\n                case STATE_TAG_ATTRS:\n                    stateMode = stateAttrs();\n                    break;\n                case STATE_WORD:\n                default:\n                    stateMode = stateWord();\n                    break;\n            }\n        }\n        tokens.length = tokenIndex + 1;\n        return tokens;\n    }\n    function isTokenNested(token) {\n        const value = openTag + SLASH + token.getValue();\n        if (nestedMap.has(value)) {\n            return !!nestedMap.get(value);\n        } else {\n            const status = buffer.indexOf(value) > -1;\n            nestedMap.set(value, status);\n            return status;\n        }\n    }\n    return {\n        tokenize,\n        isTokenNested\n    };\n}\n","import { CLOSE_BRAKET, OPEN_BRAKET, TagNode, isTagNode } from \"@bbob/plugin-helper\";\nimport { createLexer } from \"./lexer\";\nclass NodeList {\n    last() {\n        if (Array.isArray(this.n) && this.n.length > 0 && typeof this.n[this.n.length - 1] !== \"undefined\") {\n            return this.n[this.n.length - 1];\n        }\n        return null;\n    }\n    flush() {\n        return this.n.length ? this.n.pop() : false;\n    }\n    push(value) {\n        this.n.push(value);\n    }\n    toArray() {\n        return this.n;\n    }\n    constructor(){\n        this.n = [];\n    }\n}\nconst createList = ()=>new NodeList();\nfunction parse(input, opts = {}) {\n    const options = opts;\n    const openTag = options.openTag || OPEN_BRAKET;\n    const closeTag = options.closeTag || CLOSE_BRAKET;\n    const onlyAllowTags = (options.onlyAllowTags || []).filter(Boolean).map((tag)=>tag.toLowerCase());\n    let tokenizer = null;\n    /**\n   * Result AST of nodes\n   * @private\n   * @type {NodeList}\n   */ const nodes = createList();\n    /**\n   * Temp buffer of nodes that's nested to another node\n   * @private\n   */ const nestedNodes = createList();\n    /**\n   * Temp buffer of nodes [tag..]...[/tag]\n   * @private\n   * @type {NodeList}\n   */ const tagNodes = createList();\n    /**\n   * Temp buffer of tag attributes\n   * @private\n   * @type {NodeList}\n   */ const tagNodesAttrName = createList();\n    /**\n   * Cache for nested tags checks\n   */ const nestedTagsMap = new Set();\n    function isTokenNested(token) {\n        const value = token.getValue();\n        const { isTokenNested } = tokenizer || {};\n        if (!nestedTagsMap.has(value) && isTokenNested && isTokenNested(token)) {\n            nestedTagsMap.add(value);\n            return true;\n        }\n        return nestedTagsMap.has(value);\n    }\n    /**\n   * @private\n   */ function isTagNested(tagName) {\n        return Boolean(nestedTagsMap.has(tagName));\n    }\n    /**\n   * @private\n   */ function isAllowedTag(value) {\n        if (onlyAllowTags.length) {\n            return onlyAllowTags.indexOf(value.toLowerCase()) >= 0;\n        }\n        return true;\n    }\n    /**\n   * Flushes temp tag nodes and its attributes buffers\n   * @private\n   */ function flushTagNodes() {\n        if (tagNodes.flush()) {\n            tagNodesAttrName.flush();\n        }\n    }\n    /**\n   * @private\n   */ function getNodes() {\n        const lastNestedNode = nestedNodes.last();\n        if (lastNestedNode && isTagNode(lastNestedNode)) {\n            return lastNestedNode.content;\n        }\n        return nodes.toArray();\n    }\n    /**\n   * @private\n   */ function appendNodeAsString(nodes, node, isNested = true) {\n        if (Array.isArray(nodes) && typeof node !== \"undefined\") {\n            nodes.push(node.toTagStart({\n                openTag,\n                closeTag\n            }));\n            if (Array.isArray(node.content) && node.content.length) {\n                node.content.forEach((item)=>{\n                    nodes.push(item);\n                });\n                if (isNested) {\n                    nodes.push(node.toTagEnd({\n                        openTag,\n                        closeTag\n                    }));\n                }\n            }\n        }\n    }\n    /**\n   * @private\n   */ function appendNodes(nodes, node) {\n        if (Array.isArray(nodes) && typeof node !== \"undefined\") {\n            if (isTagNode(node)) {\n                if (isAllowedTag(node.tag)) {\n                    nodes.push(node.toTagNode());\n                } else {\n                    appendNodeAsString(nodes, node);\n                }\n            } else {\n                nodes.push(node);\n            }\n        }\n    }\n    /**\n   * @private\n   * @param {Token} token\n   */ function handleTagStart(token) {\n        flushTagNodes();\n        const tagNode = TagNode.create(token.getValue(), {}, []);\n        const isNested = isTokenNested(token);\n        tagNodes.push(tagNode);\n        if (isNested) {\n            nestedNodes.push(tagNode);\n        } else {\n            const nodes = getNodes();\n            appendNodes(nodes, tagNode);\n        }\n    }\n    /**\n   * @private\n   * @param {Token} token\n   */ function handleTagEnd(token) {\n        flushTagNodes();\n        const lastNestedNode = nestedNodes.flush();\n        if (lastNestedNode) {\n            const nodes = getNodes();\n            appendNodes(nodes, lastNestedNode);\n        } else if (typeof options.onError === \"function\") {\n            const tag = token.getValue();\n            const line = token.getLine();\n            const column = token.getColumn();\n            options.onError({\n                tagName: tag,\n                lineNumber: line,\n                columnNumber: column\n            });\n        }\n    }\n    /**\n   * @private\n   * @param {Token} token\n   */ function handleTag(token) {\n        // [tag]\n        if (token.isStart()) {\n            handleTagStart(token);\n        }\n        // [/tag]\n        if (token.isEnd()) {\n            handleTagEnd(token);\n        }\n    }\n    /**\n   * @private\n   * @param {Token} token\n   */ function handleNode(token) {\n        /**\n     * @type {TagNode}\n     */ const activeTagNode = tagNodes.last();\n        const tokenValue = token.getValue();\n        const isNested = isTagNested(token.toString());\n        const nodes = getNodes();\n        if (activeTagNode !== null) {\n            if (token.isAttrName()) {\n                tagNodesAttrName.push(tokenValue);\n                const attrName = tagNodesAttrName.last();\n                if (attrName) {\n                    activeTagNode.attr(attrName, \"\");\n                }\n            } else if (token.isAttrValue()) {\n                const attrName = tagNodesAttrName.last();\n                if (attrName) {\n                    activeTagNode.attr(attrName, tokenValue);\n                    tagNodesAttrName.flush();\n                } else {\n                    activeTagNode.attr(tokenValue, tokenValue);\n                }\n            } else if (token.isText()) {\n                if (isNested) {\n                    activeTagNode.append(tokenValue);\n                } else {\n                    appendNodes(nodes, tokenValue);\n                }\n            } else if (token.isTag()) {\n                // if tag is not allowed, just pass it as is\n                appendNodes(nodes, token.toString());\n            }\n        } else if (token.isText()) {\n            appendNodes(nodes, tokenValue);\n        } else if (token.isTag()) {\n            // if tag is not allowed, just pass it as is\n            appendNodes(nodes, token.toString());\n        }\n    }\n    /**\n   * @private\n   * @param {Token} token\n   */ function onToken(token) {\n        if (token.isTag()) {\n            handleTag(token);\n        } else {\n            handleNode(token);\n        }\n    }\n    const lexer = opts.createTokenizer ? opts.createTokenizer : createLexer;\n    tokenizer = lexer(input, {\n        onToken,\n        openTag,\n        closeTag,\n        onlyAllowTags: options.onlyAllowTags,\n        contextFreeTags: options.contextFreeTags,\n        enableEscapeTags: options.enableEscapeTags\n    });\n    // eslint-disable-next-line no-unused-vars\n    const tokens = tokenizer.tokenize();\n    // handles situations where we open tag, but forgot close them\n    // for ex [q]test[/q][u]some[/u][q]some [u]some[/u] // forgot to close [/q]\n    // so we need to flush nested content to nodes array\n    const lastNestedNode = nestedNodes.flush();\n    if (lastNestedNode !== null && lastNestedNode && isTagNode(lastNestedNode) && isTagNested(lastNestedNode.tag)) {\n        appendNodeAsString(getNodes(), lastNestedNode, false);\n    }\n    return nodes.toArray();\n}\nexport { parse };\nexport default parse;\n","/* eslint-disable no-plusplus */ const isObj = (value)=>typeof value === 'object' && value !== null;\nconst isBool = (value)=>typeof value === 'boolean';\nexport function iterate(t, cb) {\n    const tree = t;\n    if (Array.isArray(tree)) {\n        for(let idx = 0; idx < tree.length; idx++){\n            tree[idx] = iterate(cb(tree[idx]), cb);\n        }\n    } else if (isObj(tree) && 'content' in tree) {\n        iterate(tree.content, cb);\n    }\n    return tree;\n}\nexport function same(expected, actual) {\n    if (typeof expected !== typeof actual) {\n        return false;\n    }\n    if (!isObj(expected) || expected === null) {\n        return expected === actual;\n    }\n    if (Array.isArray(expected)) {\n        return expected.every((exp)=>[].some.call(actual, (act)=>same(exp, act)));\n    }\n    if (isObj(expected) && isObj(actual)) {\n        return Object.keys(expected).every((key)=>{\n            const ao = actual[key];\n            const eo = expected[key];\n            if (isObj(eo) && isObj(ao)) {\n                return same(eo, ao);\n            }\n            if (isBool(eo)) {\n                return eo !== (ao === null);\n            }\n            return ao === eo;\n        });\n    }\n    return false;\n}\nexport function match(t, expression, cb) {\n    if (Array.isArray(expression)) {\n        return iterate(t, (node)=>{\n            for(let idx = 0; idx < expression.length; idx++){\n                if (same(expression[idx], node)) {\n                    return cb(node);\n                }\n            }\n            return node;\n        });\n    }\n    return iterate(t, (node)=>same(expression, node) ? cb(node) : node);\n}\n","let C1 = 'C1';\nlet C2 = 'C2';\nif (process.env.NODE_ENV !== 'production') {\n    C1 = '\"parser\" is not a function, please pass to \"process(input, { parser })\" right function';\n    C2 = '\"render\" function not defined, please pass to \"process(input, { render })\"';\n}\nexport { C1, C2 };\n","import { parse } from '@bbob/parser';\nimport { iterate, match } from './utils';\nimport { C1, C2 } from './errors';\nexport function createTree(tree, options) {\n    const extendedTree = tree;\n    extendedTree.messages = [\n        ...extendedTree.messages || []\n    ];\n    extendedTree.options = {\n        ...options,\n        ...extendedTree.options\n    };\n    extendedTree.walk = function walkNodes(cb) {\n        return iterate(this, cb);\n    };\n    extendedTree.match = function matchNodes(expr, cb) {\n        return match(this, expr, cb);\n    };\n    return extendedTree;\n}\nexport default function bbob(plugs) {\n    const plugins = typeof plugs === 'function' ? [\n        plugs\n    ] : plugs || [];\n    const mockRender = ()=>\"\";\n    return {\n        process (input, opts) {\n            const options = opts || {\n                skipParse: false,\n                parser: parse,\n                render: mockRender,\n                data: null\n            };\n            const parseFn = options.parser || parse;\n            const renderFn = options.render;\n            const data = options.data || null;\n            if (typeof parseFn !== 'function') {\n                throw new Error(C1);\n            }\n            // raw tree before modification with plugins\n            const raw = options.skipParse && Array.isArray(input) ? input : parseFn(input, options);\n            let tree = options.skipParse && Array.isArray(input) ? createTree(input || [], options) : createTree(raw, options);\n            for(let idx = 0; idx < plugins.length; idx++){\n                const plugin = plugins[idx];\n                if (typeof plugin === 'function' && renderFn) {\n                    const newTree = plugin(tree, {\n                        parse: parseFn,\n                        render: renderFn,\n                        iterate,\n                        data\n                    });\n                    tree = createTree(newTree || tree, options);\n                }\n            }\n            return {\n                get html () {\n                    if (typeof renderFn !== 'function') {\n                        throw new Error(C2);\n                    }\n                    return renderFn(tree, tree.options);\n                },\n                tree,\n                raw,\n                messages: tree.messages\n            };\n        }\n    };\n}\n","let C1 = 'C1';\nlet C2 = 'C2';\nif (process.env.NODE_ENV !== 'production') {\n    C1 = '\"parser\" is not a function, please pass to \"process(input, { parser })\" right function';\n    C2 = '\"render\" function not defined, please pass to \"process(input, { render })\"';\n}\nexport { C1, C2 };\n","import core from '@bbob/core';\nimport { attrsToString, isTagNode } from '@bbob/plugin-helper';\nconst SELFCLOSE_END_TAG = '/>';\nconst CLOSE_START_TAG = '</';\nconst START_TAG = '<';\nconst END_TAG = '>';\nfunction renderNode(node, options) {\n    const { stripTags = false } = options || {};\n    if (typeof node === 'undefined' || node === null) {\n        return '';\n    }\n    if (typeof node === 'string' || typeof node === 'number') {\n        return String(node);\n    }\n    if (Array.isArray(node)) {\n        return render(node, options);\n    }\n    if (isTagNode(node)) {\n        if (stripTags) {\n            return render(node.content, options);\n        }\n        const attrs = attrsToString(node.attrs);\n        if (node.content === null) {\n            return START_TAG + node.tag + attrs + SELFCLOSE_END_TAG;\n        }\n        return START_TAG + node.tag + attrs + END_TAG + render(node.content, options) + CLOSE_START_TAG + node.tag + END_TAG;\n    }\n    return '';\n}\nexport function render(nodes, options) {\n    if (nodes && Array.isArray(nodes)) {\n        return nodes.reduce((r, node)=>r + renderNode(node, options), '');\n    }\n    if (nodes) {\n        return renderNode(nodes, options);\n    }\n    return '';\n}\nexport function html(source, plugins, options) {\n    return core(plugins).process(source, {\n        ...options,\n        render: render\n    }).html;\n}\nexport default html;\n","/**\n * Generate the node object.\n *\n * Contains additional logic to help break any unintended side effects of the top down parsing of bbob.\n * @param {string} tag name of the tag\n * @param {Object<string, boolean|string|string[]>} attrs attributes of the tag\n * @param {any} content contents of the tag. `[]` will create an empty tag. `null` will create a self closing tag\n *\n * @example\n * ```\n * toNode(\"div\", { class: \"class\" }, \"content\")\n * ```\n * becomes\n * ```\n * {\n *  tag: \"div\",\n *  attrs: { class: \"class\" },\n *  content: \"content\",\n *  gen: true,\n * }\n */\nconst toNode = (tag, attrs, content = []) => ({\n  tag,\n  attrs,\n  content,\n  gen: true,\n});\n\n/**\n * Preprocess attributes of a node to either combine all values into a single default value\n * or return a keyed attribute list\n * @param {any} attrs object of bbcode node attrs\n * @param {string[]} predefinedKeys array of predefined keys to be captured\n * @returns processed attributes\n */\nconst preprocessAttr = (attrs) => {\n  const keys = Object.keys(attrs).join(\" \");\n  const vals = Object.values(attrs).join(\" \");\n  if (keys === vals) {\n    return {\n      _default: vals,\n    };\n  } else {\n    return attrs;\n  }\n};\n\n/**\n * Attempts to return tag into its original form with proper attributes\n * @returns string of tag start\n */\nconst toOriginalStartTag = (node) => {\n  if (!node.attrs) {\n    return `[${node.tag}]`;\n  }\n  const attrs = preprocessAttr(node.attrs);\n  if (attrs._default) {\n    return `[${node.tag}=${attrs._default}]`;\n  } else {\n    return node.toTagStart();\n  }\n};\n\n/**\n * Given a string, find the first position of a regex match\n * @param {string} string to test against\n * @param {RegExp} regex to test with\n * @param {number} startpos starting position. Defaults to 0\n * @returns index of the first match of the regex in the string\n */\nconst regexIndexOf = (string, regex, startpos) => {\n  const indexOf = string.substring(startpos || 0).search(regex);\n  return indexOf >= 0 ? indexOf + (startpos || 0) : indexOf;\n};\n\nconst MD_NEWLINE_INJECT = \"<!-- bbcode injected newlines -->\\n\\n\";\nconst MD_NEWLINE_PRE_INJECT = \"\\n\\n<!-- bbcode pre injected newlines -->\";\nconst MD_NEWLINE_INJECT_COMMENT = \"<!-- bbcode injected newlines -->\";\n\nconst URL_REGEX =\n  /(http|ftp|https|upload):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/;\nconst MD_URL_REGEX =\n  /\\!?\\[.*\\]\\((http|ftp|https|upload):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])\\)/;\nconst URL_REGEX_SINGLE_LINE = new RegExp(`^${URL_REGEX.source}|${MD_URL_REGEX.source}$`);\nconst ESCAPABLES_REGEX =\n  /((\\n|^)(?<fence>```+|~~~+)(?<fenceInfo>.*\\n))|(?<bbcode>\\[(?<bbcodeTag>i?code|plain)(=.*)?\\])|(?<backtick>(?<tickStart>`{1,2})(.*)(?<tickEnd>\\k<tickStart>))/im;\nconst MD_TABLE_REGEX = /^(\\|[^\\n]+\\|\\r?\\n)((?:\\| ?:?[-]+:? ?)+\\|)(\\n(?:\\|[^\\n]+\\|\\r?\\n?)*)?$/m;\n\n/**\n * Generates a random GUID.\n *\n * Mini Racer doesn't have the crypto module, so we can't use the built-in `crypto.randomUUID` function.\n * @returns {string} a GUID\n */\nfunction generateGUID() {\n  let d = new Date().getTime();\n  if (window.performance && typeof window.performance.now === \"function\") {\n    d += performance.now(); //use high-precision timer if available\n  }\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line no-bitwise\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    // eslint-disable-next-line no-bitwise\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\nexport {\n  toNode,\n  toOriginalStartTag,\n  generateGUID,\n  preprocessAttr,\n  regexIndexOf,\n  MD_NEWLINE_INJECT,\n  MD_NEWLINE_INJECT_COMMENT,\n  MD_NEWLINE_PRE_INJECT,\n  URL_REGEX,\n  MD_URL_REGEX,\n  MD_TABLE_REGEX,\n  URL_REGEX_SINGLE_LINE,\n  ESCAPABLES_REGEX,\n};\n","/**\n * Plugin that converts line breaks to `<br/>` tags.\n * To use, put as function similar to the presets.\n *\n * If a node is marked with `noLineBreakConversion`, then it'll skip the parsing the children\n *\n * @example\n * ```ts\n * const output = bbob([preset(), lineBreakPlugin()]).process(input, {render}).html\n * ```\n */\nimport { isEOL } from \"@bbob/plugin-helper\";\nimport { MD_NEWLINE_INJECT, MD_NEWLINE_PRE_INJECT, URL_REGEX_SINGLE_LINE } from \"../utils/common\";\n\nconst isObj = (value) => typeof value === \"object\";\nconst isString = (value) => typeof value === \"string\";\n\n/**\n * Walks the tree of nodes. Will add `br` tag to all `\\n` in format that can be used in any renderer.\n * Preserves \\n so that markdown-it doesn't try to treat everything like a block\n *\n * If a node has the property noLineBreakConversion is encountered, will skip parsing children.\n * @param t tree of nodes to be processed\n * @returns modified tree\n */\nconst walk = (t, disableLineBreakConversion = false) => {\n  const tree = t;\n\n  if (Array.isArray(tree)) {\n    if (tree.some(isString)) {\n      // array contains strings. Might be md compatible\n      tree.unshift(MD_NEWLINE_INJECT);\n      tree.push(MD_NEWLINE_INJECT);\n    }\n    for (let idx = 0; idx < tree.length; idx++) {\n      const child = walk(tree[idx], disableLineBreakConversion);\n      if (Array.isArray(child)) {\n        tree.splice(idx, 1, ...child);\n        idx += child.length - 1;\n      } else {\n        tree[idx] = child;\n      }\n    }\n  } else if (tree && isObj(tree) && tree.content) {\n    if (tree.isWhitespaceSensitive) {\n      // applies only to [code] and [icode]\n      // stop walk. children won't be parsed to have <br>\n      return tree.tag ? tree : tree.content;\n    }\n    if (tree.disableLineBreakConversion) {\n      disableLineBreakConversion = true;\n    }\n    walk(tree.content, disableLineBreakConversion);\n    return tree.tag ? tree : tree.content;\n  } else if (isString(tree) && URL_REGEX_SINGLE_LINE.test(tree.trim())) {\n    // if the entire string is a URL, then it should be prepared for onebox.\n    // BBob separates strings by newlines anyway, so we can already assume this is sitting on its own line\n    // MD_NEWLINE_INJECT is already replacing newline came before or the start of the array,\n    // so we only need to make sure \\n\\n is added after the URL\n    return [tree, MD_NEWLINE_PRE_INJECT];\n  }\n\n  if (isString(tree) && isEOL(tree)) {\n    return disableLineBreakConversion\n      ? [\"\\n\", MD_NEWLINE_INJECT]\n      : [{ tag: \"br\", content: null }, MD_NEWLINE_INJECT];\n  }\n\n  return tree;\n};\n\n/**\n * Converts `\\n` to `<br/>` self closing tag. Supply this as the last plugin in the preset lists\n *\n * @example converts all line breaks to br\n * ```ts\n * const output = bbob([preset(), lineBreakPlugin()]).process(input, {render}).html\n * ```\n * @example will not convert line breaks inside [nobr]\n * ```ts\n * const nobr = (node: TagNode) => {return { disableLineBreakConversion: true, content: node.content }}; \\\\ tag in preset\n * ...\n * const output = bbob([preset(), lineBreakPlugin()]).process(input, {render}).html\n * ```\n * @returns plugin to be used in BBob process\n */\nexport const lineBreakPlugin = () => {\n  return (tree) => walk(tree);\n};\n","/**\n * Plugin that converts consecutive normal spaces (U+0020) to non-breaking spaces (U+00A0).\n * To use, put as function similar to the presets.\n *\n *\n * @example\n * ```ts\n * const output = bbob([preset(), , preserveWhitespace(), lineBreakPlugin()]).process(input, {render}).html\n * ```\n */\nimport { isStringNode } from \"@bbob/plugin-helper\";\n\n/**\n * Checks if input is an object\n * @param value input\n * @returns if value is an object\n */\nconst isObj = (value) => typeof value === \"object\";\n\n/**\n * Walks the tree of nodes. Checks for node of consecutive spaces. If found replaces every space in\n * node with a nonbreaking space.\n * Preserves multiple spaces so html won't truncate them.\n *\n * Walks through entire tree.\n * @param t tree of nodes to be processed\n * @returns modified tree\n */\nconst walk = (t) => {\n  const tree = t;\n\n  if (Array.isArray(tree)) {\n    for (let idx = 0; idx < tree.length; idx++) {\n      const child = walk(tree[idx]);\n      if (Array.isArray(child)) {\n        tree.splice(idx, 1, ...child);\n        idx += child.length - 1;\n      } else {\n        tree[idx] = child;\n      }\n    }\n  } else if (tree && isObj(tree) && tree.content) {\n    walk(tree.content);\n  }\n\n  //Bbob breaks up nodes by the presence of normal spaces.\n  //So a node with a normal space can only have normal spaces in that node.\n  if (isStringNode(tree)) {\n    if (tree.length > 1 && tree[0] === \" \") {\n      let numSpaces = tree.length;\n      return [String.fromCharCode(160).repeat(numSpaces)];\n    }\n  }\n\n  return tree;\n};\n\n/**\n * Converts consecutive normal spaces (U+0020) to nonbreaking spaces (U+00A0).\n * Supply this as a plugin in the preset lists.\n *\n * @example converts consecutive normal spaces (U+0020) to nonbreaking spaces (U+00A0)\n * ```ts\n * const output = bbob([preset(), preserveWhitespace(), lineBreakPlugin()]).process(input, {render}).html\n * ```\n *\n * @returns plugin to be used in BBob process\n */\nexport const preserveWhitespace = () => {\n  return (tree) => walk(tree);\n};\n","import { isTagNode } from \"@bbob/plugin-helper\";\nexport function process(tags, tree, core, options) {\n    return tree.walk((node)=>{\n        if (isTagNode(node)) {\n            const tag = node.tag;\n            const tagCallback = tags[tag];\n            if (typeof tagCallback === \"function\") {\n                return tagCallback(node, core, options);\n            }\n        }\n        return node;\n    });\n}\n/**\n * Create a preset plugin for @bbob/core\n */ function createPreset(defTags, processor = process) {\n    const presetFactory = (opts)=>{\n        presetFactory.options = Object.assign(presetFactory.options || {}, opts);\n        function presetExecutor(tree, core) {\n            return processor(defTags, tree, core, presetFactory.options || {});\n        }\n        presetExecutor.options = presetFactory.options;\n        return presetExecutor;\n    };\n    presetFactory.extend = function presetExtend(callback) {\n        const newTags = callback(defTags, presetFactory.options);\n        return createPreset(newTags, processor);\n    };\n    return presetFactory;\n}\nexport { createPreset };\nexport default createPreset;\n","import { toNode } from \"../utils/common\";\n/**\n * @file Adds [left], [center], and [right] to bbcode\n * @example [center]content[/center]\n */\nexport const alignment = {\n  left: (node) => toNode(\"div\", { class: \"bb-left\" }, node.content),\n  center: (node) => toNode(\"div\", { class: \"bb-center\" }, node.content),\n  right: (node) => toNode(\"div\", { class: \"bb-right\" }, node.content),\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n/**\n * @file Adds [id] and [goto] to bbcode\n * @example [a=your_anchor_name]An anchor[/a] [goto=your_anchor_name]Jump to an anchor[/goto]\n */\nexport const anchor = {\n    // name is not valid in HTML5; however, it correctly displays back while id does not\n    a: (node) => {\n        const attrs = preprocessAttr(node.attrs)._default || \"\";\n        return toNode(\"a\", { id: `user-anchor-${attrs.trim()}`, name: `user-anchor-${attrs.trim()}` }, node.content);\n      },\n      goto: (node) => {\n        const attrs = preprocessAttr(node.attrs)._default || \"\";\n        toNode(\"a\", { href: `#user-anchor-${attrs.trim()}` }, node.content);\n      }\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nconst WEB_FONTS = [\n  \"arial\",\n  \"book antiqua\",\n  \"courier new\",\n  \"georgia\",\n  \"tahoma\",\n  \"times new roman\",\n  \"trebuchet ms\",\n  \"verdana\",\n];\nconst VALID_FONT_STYLES = {\n  thin: \"100\",\n  extralight: \"200\",\n  light: \"300\",\n  regular: \"400\",\n  medium: \"500\",\n  semibold: \"600\",\n  bold: \"700\",\n  extrabold: \"800\",\n  black: \"900\",\n};\n// registered axis tags https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg#registered-axis-tags\nconst REGISTERED_AXIS = [\"ital\", \"opsz\", \"slnt\", \"wdth\", \"wght\"];\n\nconst AXES_REGEX = /(?<named_weight>[a-zA-Z]*)?\\s?(?<weight>[0-9]*)?\\s?(?<italic>italic)?/;\n\nconst axesParser = (attrs) => {\n  let axes = {\n    ital: 0,\n    wght: 400,\n  };\n\n  if (attrs?.style) {\n    // user just copy pasted the name of the style on the google font site, probably\n    const style = attrs.style.trim().toLowerCase();\n    const matches = AXES_REGEX.exec(style).groups || {};\n    if (matches?.italic) {\n      axes.ital = 1;\n    }\n\n    const weight = matches.weight;\n    if (weight && weight >= 0 && weight <= 900) {\n      axes.wght = weight;\n    } else if (Object.keys(VALID_FONT_STYLES).includes(matches.named_weight || \"\")) {\n      axes.wght = VALID_FONT_STYLES[matches.named_weight];\n    }\n\n    axes = {\n      ...axes,\n      ...Object.fromEntries(Object.entries(attrs).filter(([key]) => REGISTERED_AXIS.includes(key))),\n    };\n  }\n  return axes;\n};\n\n/**\n * Create google font api url\n * @param {string} family name of font\n * @param {object<string, string>} axes custom font axes\n */\nconst googleFontApiBuild = (family, axes) => {\n  family = family.replaceAll(\" \", \"+\");\n  // google fonts requires axes names to be in alphabetical order\n  axes = Object.keys(axes)\n    .sort()\n    .reduce((obj, key) => {\n      obj[key] = axes[key];\n      return obj;\n    }, {});\n  const axesList = Object.keys(axes).join(\",\") + \"@\" + Object.values(axes).join(\",\");\n  return \"https://fonts.googleapis.com/css2?family=\" + family + \":\" + axesList;\n};\n\nexport const font = (node, options) => {\n  const attrs = preprocessAttr(node.attrs);\n  const fontFamily = attrs?._default || attrs.family || attrs.name;\n  if (fontFamily.trim() === \"\") {\n    return node.content;\n  }\n  if (WEB_FONTS.includes(fontFamily.trim().toLowerCase())) {\n    return toNode(\"span\", { style: \"font-family: \" + fontFamily }, node.content);\n  }\n\n  const axes = axesParser(attrs);\n  const url = googleFontApiBuild(fontFamily, axes);\n  options.data.fonts.add(url);\n\n  const italic = axes.ital === 1 ? \"italic\" : \"normal\";\n\n  const custom = Object.entries(axes).filter(([key]) => key !== \"wght\" && key !== \"ital\");\n  let fontVar = \"\";\n  if (custom.length) {\n    fontVar =\n      \"font-variation-settings: \" + custom.map(([key, val]) => `'${key}' ${val}`).join(\", \") + \";\";\n  }\n\n  return toNode(\n    \"span\",\n    {\n      style: `font-family: ${fontFamily}; font-weight: ${axes.wght}; font-style: ${italic}; ${fontVar}`,\n      \"data-font\": url,\n    },\n    node.content,\n  );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Parse the user provided height and return a valid height value\n * @param {Number} heightValue obtains the input of the user entered height (default is 700)\n * @returns A validated number less than 0.\n */\nfunction parseHeight(heightValue) {\n  const maxHeight = 700;\n  const parsedHeight =\n    heightValue && heightValue.trim() !== \"\" ? heightValue.replace(/[^\\d.]/g, \"\") : 0;\n\n  if (parsedHeight && parsedHeight >= 0 && parsedHeight <= maxHeight) {\n    return parsedHeight;\n  } else {\n    // if the value = 0 then nothing will be returned\n    return parsedHeight === 0 ? 0 : maxHeight;\n  }\n}\n\n/**\n * @file Adds [heightrestrict] to bbcode\n * @example [heightrestrict=50]content[/heightrestrict]\n */\nexport const heightrestrict = (node) => {\n  const attrs = preprocessAttr(node.attrs)._default;\n  const heightInput = parseHeight(attrs).toString();\n  // Return image's default size if heightrestrict did not involve a valid value\n  return heightInput === \"0\"\n    ? toNode(\"div\", { class: \"bb-height-restrict\" }, node.content)\n    : toNode(\n        \"div\",\n        { class: \"bb-height-restrict\", style: `height: ${heightInput}px;` },\n        node.content,\n      );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n/**\n * @file Adds [mail] to bbcode\n * @param {string} [type=\"send\"] Denotes type of mail either send or receive\n * @param {string} [person=\"Unknown\"] Denotes the person in the To/From field\n * @param {string} [subject=\"Empty\"] Denotes the subject line of the email\n * @example [mail type=\"send\" person=\"John Doe\" subject=\"Hello World\"]content[/mail]\n */\n\nconst parseEmailContent = (content) => {\n  return toNode(\"div\", { class: \"bb-email-content\" }, content);\n};\n\nconst parseEmailSubject = (subject) => {\n  return toNode(\"div\", { class: \"bb-email-subject\" }, subject);\n};\n\nconst parseEmailPerson = (person) => {\n  return toNode(\"div\", { class: \"bb-email-address\" }, person);\n};\n\nconst emailHeader = toNode(\"div\", { class: \"bb-email-header\" }, \"\");\nconst emailFooter = toNode(\n  \"div\",\n  { class: \"bb-email-footer\" },\n  toNode(\"div\", { class: \"bb-email-button\" }, \"\")\n);\n\nexport const mail = (node) => {\n  const attributes = preprocessAttr(node.attrs);\n  let mailAttr = {\n    mailOption: (attributes.type || \"send\").toLowerCase(),\n    person: attributes.person || \"Unknown\",\n    subject: attributes.subject || \"Empty\",\n  };\n\n  return toNode(\n    \"div\",\n    {\n      class: \"bb-email\",\n      \"data-bb-email\": mailAttr.mailOption,\n    },\n    [\n      emailHeader,\n      parseEmailPerson(mailAttr.person),\n      parseEmailSubject(mailAttr.subject),\n      parseEmailContent(node.content),\n      emailFooter,\n    ]\n  );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * @file Adds [row][column] to bbcode\n * @example Adds [row][column][/column][/row]\n */\nexport const rowcolumn = {\n  row: (node) => toNode(\"div\", { class: \"bb-row\" }, node.content),\n  column: (node) => {\n    const columnAttrs = preprocessAttr(node.attrs)._default || \"8\";\n    const columnStyle = columnAttrs.startsWith(\"span\")\n      ? `column-width-${columnAttrs}`\n      : `column-width-span${columnAttrs}`;\n    return toNode(\"div\", { class: `bb-column`, \"data-span\": columnStyle }, node.content);\n  },\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Parses an inputted size value and returns the formatted valid font size\n * @param {string} fontValue the input of the size\n */\nfunction parseFontSize(fontValue) {\n  let value;\n  let fontSize = { valid: true };\n  const parsedSize = /(\\d+\\.?\\d?)(px|rem)?/i.exec(fontValue);\n  const sizeRanges = {\n    px_max: 36,\n    px_min: 8,\n    rem_max: 3,\n    rem_min: 0.2,\n    unitless_max: 7,\n    unitless_min: 1,\n  };\n\n  if (parsedSize && (value = parsedSize[1])) {\n    fontSize.unit = (parsedSize[2] || \"\").toLowerCase();\n    switch (fontSize.unit) {\n      case \"px\":\n        if (value > sizeRanges.px_max) {\n          value = sizeRanges.px_max;\n        } else if (value < sizeRanges.px_min) {\n          value = sizeRanges.px_min;\n        }\n        break;\n      case \"rem\":\n        if (value > sizeRanges.rem_max) {\n          value = sizeRanges.rem_max;\n        } else if (value < sizeRanges.rem_min) {\n          value = sizeRanges.rem_min;\n        }\n        break;\n      default:\n        if ((fontSize.valid = fontValue.length === value.length)) {\n          if (value > sizeRanges.unitless_max) {\n            value = sizeRanges.unitless_max;\n          } else if (value < sizeRanges.unitless_min) {\n            value = sizeRanges.unitless_min;\n          }\n        }\n        break;\n    }\n\n    fontSize.value = value;\n  }\n  return fontSize;\n}\n\nexport const size = (node) => {\n  const input = preprocessAttr(node.attrs)._default;\n  const fontSize = parseFontSize(input);\n  if (!fontSize.valid) {\n    return node.content;\n  }\n  let outputAttr = {};\n  if (fontSize.unit) {\n    outputAttr = { style: `font-size: ${fontSize.value}${fontSize.unit}` };\n  } else {\n    outputAttr = { \"data-size\": fontSize.value };\n  }\n  return toNode(\"span\", outputAttr, node.content);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * @file Adds textmessage to bbcode\n * @exmaple [textmessage=Recipient][message=them]Hi [/message][message=me] Hey![/message][/textmessage]\n */\n\nconst ACCEPTED_OPTIONS = [\"me\", \"them\", \"right\", \"left\"];\nexport const textmessage = {\n  textmessage: (node) => {\n    const attr = preprocessAttr(node.attrs)._default || \"Recipient\";\n    const recipient = attr && attr.trim() !== \"\" ? attr : \"Recipient\";\n    return toNode(\"div\", { class: \"bb-textmessage\" }, [\n      toNode(\"div\", { class: \"bb-textmessage-name\" }, recipient),\n      toNode(\"div\", { class: \"bb-textmessage-overflow\" }, [\n        toNode(\"div\", { class: \"bb-textmessage-content\" }, node.content),\n      ]),\n    ]);\n  },\n  message: (node) => {\n    let option = preprocessAttr(node.attrs)._default.toLowerCase();\n    if (!ACCEPTED_OPTIONS.includes(option) || option === \"right\") {\n      option = \"me\";\n    }\n    if (option === \"left\") {\n      option = \"them\";\n    }\n\n    const senderAttrs = option === \"me\" ? \"bb-message-me\" : \"bb-message-them\";\n    return toNode(\"div\", { class: senderAttrs }, [\n      toNode(\"div\", { class: \"bb-message-content\" }, node.content),\n    ]);\n  },\n};\n","import {\n  generateGUID,\n  preprocessAttr,\n  regexIndexOf,\n  toNode,\n  toOriginalStartTag,\n} from \"../utils/common\";\nimport { TagNode, isStringNode, isTagNode } from \"@bbob/plugin-helper\";\n\nconst SLIDE_TITLE_OPEN = Symbol(\"slide-title-open\");\nconst SLIDE_TITLE_CLOSE = Symbol(\"slide-title-close\");\nconst SLIDE_CLOSE = Symbol(\"slide-close\");\nconst SLIDE_REGEX =\n  /(?<slideTitleOpen>\\{slide=)|(?<slideTitleClose>\\})|(?<slideClose>\\{\\/slide\\})/i;\n\n/**\n * Adds the accordion tag\n * [accordion]{slide=name}content{/slide}[/accordion]\n *\n * [accordion][slide=name]content[/slide][/accordion]\n */\nconst accordion = (node) => {\n  const groupId = generateGUID();\n\n  // add support for existing {slide} tags style, due to copious amounts of existing content\n  // also the only way to get true custom content inside a slide due to nesting limitations\n  const markedContent = generateSlideMarkersFromContent(node.content);\n  const generatedSlides = generateSlidesFromMarkers(markedContent);\n\n  const filteredContent = generatedSlides\n    .filter((n) => isTagNode(n) && n.tag === \"slide\")\n    .map((content) => {\n      content.isValid = true;\n      content.groupId = groupId;\n      return content;\n    });\n  if (!filteredContent.length) {\n    // no [slide] tags found\n    return [toOriginalStartTag(node), ...node.content, node.toTagEnd()];\n  }\n\n  const attrs = preprocessAttr(node.attrs);\n\n  if (attrs._default) {\n    /** @type {string[]} */\n    const customSettings = attrs._default.split(\"|\").map((s) => s.trim());\n    if (customSettings.includes(\"bright\")) {\n      attrs.bright = true;\n    }\n    if (customSettings.includes(\"bcenter\")) {\n      attrs.bcenter = true;\n    }\n    if (customSettings.includes(\"bleft\")) {\n      attrs.bleft = true;\n    }\n    if (customSettings.includes(\"fleft\")) {\n      attrs.fleft = true;\n    }\n    if (customSettings.includes(\"fright\")) {\n      attrs.fright = true;\n    }\n    if (\n      customSettings.some((s) => s.endsWith(\"px\")) ||\n      customSettings.some((s) => s.endsWith(\"%\"))\n    ) {\n      attrs.width = customSettings.find((s) => s.endsWith(\"px\") || s.endsWith(\"%\"));\n    }\n  }\n\n  let classes = Object.keys(attrs)\n    .filter((s) => [\"bright\", \"bcenter\", \"bleft\", \"fleft\", \"fright\"].includes(s))\n    .join(\" \");\n  let style = \"\";\n  if (attrs.width?.endsWith(\"px\") || attrs.width?.endsWith(\"%\")) {\n    style = `width: ${attrs.width};`;\n  }\n  return toNode(\n    \"div\",\n    { class: \"bb-accordion \" + classes, \"data-group-id\": groupId, style },\n    filteredContent,\n  );\n};\n\n/**\n * Locates and splits all {slide} tag components into their respective parts while preserving remaining content\n * @param {(TagNode|string)[]} contentArr node content of the accordion tag\n *\n * @example\n * ```\n * [\"{slide=test}\", \"lorem ipsum\", \"{/slide}\"]\n * ```\n * becomes\n * ```\n * [SLIDE_TITLE_OPEN, \"test\", SLIDE_TITLE_CLOSE, \"lorem ipsum\", SLIDE_CLOSE]\n * ```\n */\nfunction generateSlideMarkersFromContent(contentArr) {\n  contentArr = [...contentArr]; // shallow clone. object nodes are not modified anyway\n\n  const newArr = [];\n  while (contentArr.length > 0) {\n    const content = contentArr[0];\n    if (isTagNode(content)) {\n      newArr.push(contentArr.shift());\n      continue;\n    }\n    const foundIndex = regexIndexOf(content, SLIDE_REGEX);\n    if (foundIndex === -1) {\n      newArr.push(contentArr.shift());\n      continue;\n    }\n    const match = content.match(SLIDE_REGEX);\n    const preContent = content.slice(0, foundIndex);\n    const postContent = content.slice(foundIndex + match[0].length);\n    if (preContent.length) {\n      newArr.push(preContent);\n    }\n    if (match.groups.slideTitleOpen) {\n      newArr.push(SLIDE_TITLE_OPEN);\n    }\n    if (match.groups.slideTitleClose) {\n      newArr.push(SLIDE_TITLE_CLOSE);\n    }\n    if (match.groups.slideClose) {\n      newArr.push(SLIDE_CLOSE);\n    }\n    if (postContent.length) {\n      contentArr[0] = postContent;\n    } else {\n      contentArr.shift();\n    }\n  }\n\n  return newArr;\n}\n\n/**\n * Generates slide nodes from markers\n * @param {(string | typeof SLIDE_TITLE_OPEN | typeof SLIDE_TITLE_CLOSE | typeof SLIDE_CLOSE | TagNode)[]} markedContent\n */\nfunction generateSlidesFromMarkers(markedContent) {\n  const nodes = [];\n  let currentSlide = null;\n  /** @type {typeof SLIDE_TITLE_OPEN | typeof SLIDE_TITLE_CLOSE | null} */\n  let prevMarker = null;\n  for (const content of markedContent) {\n    if (content === SLIDE_TITLE_OPEN && prevMarker === null) {\n      currentSlide = TagNode.create(\"slide\");\n      currentSlide.content = [];\n      currentSlide.customTitle = [];\n      prevMarker = SLIDE_TITLE_OPEN;\n    } else if (content === SLIDE_TITLE_CLOSE && prevMarker === SLIDE_TITLE_OPEN) {\n      prevMarker = SLIDE_TITLE_CLOSE;\n      continue;\n    } else if (content === SLIDE_CLOSE && currentSlide && prevMarker === SLIDE_TITLE_CLOSE) {\n      nodes.push(currentSlide);\n      currentSlide = null;\n      prevMarker = null;\n    } else if (currentSlide) {\n      if (prevMarker === SLIDE_TITLE_OPEN) {\n        currentSlide.customTitle.push(markerToString(content));\n      } else {\n        currentSlide.content.push(markerToString(content));\n      }\n    } else {\n      // no slide open, just add content\n      nodes.push(markerToString(content));\n    }\n  }\n  return nodes;\n}\n\n/**\n * Processes content into a string. Catches stray markers and converts them back into a string\n * @param {string | typeof SLIDE_TITLE_OPEN | typeof SLIDE_TITLE_CLOSE | typeof SLIDE_CLOSE} marker\n * @returns expected string\n */\nfunction markerToString(marker) {\n  switch (marker) {\n    case SLIDE_TITLE_OPEN:\n      return \"{slide=\";\n    case SLIDE_TITLE_CLOSE:\n      return \"}\";\n    case SLIDE_CLOSE:\n      return \"{/slide}\";\n    default:\n      return marker;\n  }\n}\n\nconst slide = (node) => {\n  if (!node.isValid) {\n    // not inside an [accordion] tag\n    return [toOriginalStartTag(node), ...node.content, node.toTagEnd()];\n  }\n  const attrs = preprocessAttr(node.attrs);\n  let title = [attrs.title || attrs._default || \"Slide\"];\n  let isOpen = !!attrs.open || false;\n  let titleAlign = attrs.left ? \"left\" : attrs.right ? \"right\" : attrs.center ? \"center\" : \"left\";\n  if (node.customTitle?.length) {\n    // slide was created from markers\n    title = node.customTitle;\n    // pull out old options from title if they exist\n    const possibleOptions = title\n      .filter((t) => typeof t === \"string\")\n      .join(\"\")\n      .toLowerCase()\n      .split(\"|\")\n      .map((s) => s.trim());\n    if (possibleOptions.includes(\"open\")) {\n      isOpen = true;\n    }\n    if (possibleOptions.includes(\"right\")) {\n      titleAlign = \"right\";\n    }\n    if (possibleOptions.includes(\"center\")) {\n      titleAlign = \"center\";\n    }\n    if (possibleOptions.includes(\"left\")) {\n      titleAlign = \"left\";\n    }\n    title = title.map((t) => {\n      if (isStringNode(t)) {\n        t = t.replace(/\\|(open|right|center|left)/gi, \"\");\n      }\n      return t;\n    });\n  }\n  return [\n    toNode(\"details\", { class: \"bb-slide\", open: isOpen }, [\n      toNode(\n        \"summary\",\n        { class: \"bb-slide-title\", style: `text-align: ${titleAlign}; ${attrs.style || \"\"}` },\n        title,\n      ),\n      toNode(\"div\", { class: \"bb-slide-content\" }, node.content),\n    ]),\n  ];\n};\n\nexport const accordionTags = { accordion, slide };\n","import { preprocessAttr } from \"../utils/common\";\n\nconst EVENTS = [\n  \"init\",\n  \"click\",\n  \"change\",\n  \"input\",\n  \"dblclick\",\n  \"mouseenter\",\n  \"mouseleave\",\n  \"scroll\",\n];\n\n/**\n * Script tag\n *\n * [script]content[/script]\n *\n * [script class=\"id\" on=\"event\" version=\"2\"]content[/script]\n */\nexport const script = (node, options) => {\n  const attrs = preprocessAttr(node.attrs);\n\n  if (!options.data.previewing && !options.data.commonGUID) {\n    // create a common GUID for the post\n    // only applicable for div, style, and script tags\n    // this is to prevent the same class name from being used in different posts\n    options.data.commonGUID = \"post-\" + Math.random().toString(36).substring(2, 7);\n  }\n  const classSuffix = options.data.previewing ? \"preview\" : options.data.commonGUID;\n\n  const onEvent =\n    (EVENTS.includes(attrs.on?.toLowerCase() || \"init\") && attrs.on?.toLowerCase()) || \"init\";\n\n  const scriptSetup = {\n    id: classSuffix,\n    class: attrs.class || \"\",\n    on: onEvent,\n    version: attrs.version || \"\",\n    content: node.content.join(\"\"),\n  };\n  options.data.bbscripts.push(scriptSetup);\n\n  return [];\n};\n","import { createPreset } from \"@bbob/preset\";\nimport { alignment } from \"./tags/alignment\";\nimport { anchor } from \"./tags/anchor\";\nimport { bg } from \"./tags/background\";\nimport { block } from \"./tags/block\";\nimport { blockquote } from \"./tags/blockquote\";\nimport { border } from \"./tags/border\";\nimport { centerblock } from \"./tags/centerblock\";\nimport { check } from \"./tags/check\";\nimport { code, icode, savenl } from \"./tags/code\";\nimport { color } from \"./tags/color\";\nimport { comment } from \"./tags/comment\";\nimport { divide } from \"./tags/divide\";\nimport { fieldset } from \"./tags/fieldset\";\nimport { font } from \"./tags/font\";\nimport { h, h1, h2, h3, h4, h5, h6, sh } from \"./tags/header\";\nimport { heightrestrict } from \"./tags/heightrestrict\";\nimport { highlight } from \"./tags/highlight\";\nimport { imagefloat } from \"./tags/imagefloat\";\nimport { justify } from \"./tags/justify\";\nimport { mail } from \"./tags/mail\";\nimport { newspaper } from \"./tags/newspaper\";\nimport { br, nobr } from \"./tags/lineBreak\";\nimport { note } from \"./tags/note\";\nimport { ooc } from \"./tags/ooc\";\nimport { pindent } from \"./tags/pindent\";\nimport { plain } from \"./tags/plain\";\nimport { print } from \"./tags/print\";\nimport { progress } from \"./tags/progress\";\nimport { rowcolumn } from './tags/rowcolumn';\nimport { thinprogress } from \"./tags/thinprogress\";\nimport { scroll } from \"./tags/scroll\";\nimport { side } from \"./tags/side\";\nimport { size } from \"./tags/size\";\nimport { sub } from \"./tags/subscript\";\nimport { sup } from \"./tags/superscript\";\nimport { inlinespoiler, spoiler } from \"./tags/spoiler\";\nimport { textmessage } from \"./tags/textmessage\";\nimport { tab, tabs } from \"./tags/tabs\";\nimport { accordionTags } from \"./tags/accordion\";\nimport { div } from \"./tags/div\";\nimport { classStyle } from \"./tags/class\";\nimport { script } from \"./tags/script\";\nimport { animation, keyframe } from \"./tags/animation\";\nimport { bold, italic, strike, underline } from \"./tags/discourse-core-replacement\";\n\nconst tags = {\n  ...accordionTags,\n  ...alignment,\n  ...anchor,\n  animation,\n  bg,\n  block,\n  blockquote,\n  border,\n  br,\n  centerblock,\n  check,\n  class: classStyle,\n  code,\n  color,\n  comment,\n  div,\n  divide,\n  fieldset,\n  font,\n  h,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  heightrestrict,\n  highlight,\n  icode,\n  imagefloat,\n  inlinespoiler,\n  justify,\n  keyframe,\n  mail,\n  newspaper,\n  nobr,\n  note,\n  ooc,\n  pindent,\n  plain,\n  print,\n  progress,\n  ...rowcolumn,\n  thinprogress,\n  savenl,\n  sh,\n  script,\n  scroll,\n  side,\n  size,\n  spoiler,\n  sub,\n  sup,\n  tab,\n  tabs,\n  ...textmessage,\n\n  // discourse core replacement tags\n  b: bold,\n  i: italic,\n  u: underline,\n  s: strike,\n};\n\nconst availableTags = Object.keys(tags);\nconst preventParsing = [\"plain\", \"code\", \"icode\", \"class\"];\n\nconst preset = createPreset(tags);\n\nexport { availableTags, tags, preset, preventParsing };\nexport default preset;\n","import { preprocessAttr, toOriginalStartTag } from \"../utils/common\";\nimport { isStringNode, isTagNode } from \"@bbob/plugin-helper\";\n\n/**\n * Renders css Keyframes\n *\n * [animation=name][keyframe=0]color: red[/keyframe][/animation]\n */\nexport const animation = (node, options) => {\n  if (!options.data.previewing && !options.data.commonGUID) {\n    // create a common GUID for the post\n    // only applicable for div, style, and script tags\n    // this is to prevent the same class name from being used in different posts\n    options.data.commonGUID = \"post-\" + Math.random().toString(36).substring(2, 7);\n  }\n  const commonId = options.data.previewing ? \"preview\" : options.data.commonGUID;\n\n  const name = preprocessAttr(node.attrs)?._default || \"\";\n  const keyframes = node.content\n    .filter((n) => isTagNode(n) && n.tag === \"keyframe\")\n    .map((content) => {\n      content.isValid = true;\n      /** @type {string} */\n      const ident = preprocessAttr(content.attrs)._default || \"\";\n      content.ident = ident + (ident.match(/^\\d+$/) ? \"%\" : \"\");\n      const cleanContent = content.content\n        .filter(isStringNode)\n        .join(\"\")\n        .replaceAll(/[\\[\\]\\{\\}]/g, \"\");\n      content.formatted = `${content.ident}{ ${cleanContent} }`;\n      return content;\n    });\n  const keyframeContent = keyframes.map((n) => n.formatted).join(\"\\n\");\n  const content = `@keyframes ${commonId}${name} { ${keyframeContent} }`;\n  options.data.styles.push(content);\n  return [];\n};\n\nexport const keyframe = (node) => {\n  if (!node.isValid) {\n    return [toOriginalStartTag(node), ...node.content, node.toTagEnd()];\n  }\n  return [];\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Add [bg] tag\n * @example [bg=red]Hello[/bg]\n */\nexport const bg = (node) => {\n  const color = preprocessAttr(node.attrs)._default;\n  return toNode(\n    \"div\",\n    {\n      style: `background-color: ${color};`,\n      class: \"bb-background\",\n    },\n    node.content,\n  );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Add [block] tag\n * @example [block=treasure]content[/block]\n */\nexport const block = (node) => {\n  const defaultOp = \"block\";\n  const blockAttr = (preprocessAttr(node.attrs)._default || defaultOp).toLowerCase();\n\n  const OPTIONS = [\n    \"block\",\n    \"dice\",\n    \"dice10\",\n    \"setting\",\n    \"warning\",\n    \"storyteller\",\n    \"announcement\",\n    \"important\",\n    \"question\",\n    \"encounter\",\n    \"information\",\n    \"character\",\n    \"treasure\",\n  ];\n\n  // Default to block option if user did not provide anything valid\n  const blockOption = OPTIONS.includes(blockAttr) ? blockAttr : defaultOp;\n\n  return toNode(\"table\", { class: \"bb-block\", \"data-bb-block\": blockOption }, [\n    toNode(\"tbody\", [\n      toNode(\"tr\", [\n        toNode(\"td\", { class: \"bb-block-icon\" }),\n        toNode(\"td\", { class: \"bb-block-content\" }, node.content),\n      ]),\n    ]),\n  ]);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * @file Adds [blockquote] to bbcode\n * @example [blockquote=author]content[/blockquote]\n */\nexport const blockquote = (node) => {\n  const author = preprocessAttr(node.attrs)._default || \"\";\n\n  return toNode(\"div\", { class: \"bb-blockquote\" }, [\n    toNode(\"div\", { class: \"bb-blockquote-left\" }),\n    toNode(\"div\", { class: \"bb-blockquote-content\" }, [\n      node.content,\n      toNode(\"div\", { class: \"bb-blockquote-speaker\" }, author !== \"\" ? `- ${author}` : \"\"),\n    ]),\n    toNode(\"div\", { class: \"bb-blockquote-right\" }),\n  ]);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nexport const border = (node) => {\n  const val = preprocessAttr(node.attrs)._default;\n  return toNode(\n    \"div\",\n    {\n      style: `border: ${val};`,\n      class: \"bb-border\",\n    },\n    node.content\n  );\n};\n","import { toNode } from \"../utils/common\";\n\n/**\n * Creates a line break html <br/> tag\n */\nexport const br = () => {\n  return toNode(\"br\", {}, null);\n};\n\n/**\n * Disables line breaks for given content\n * @example\n * ```\n * [nobr]test\n * test\n * test\n * [/nobr]\n *\n * test test test\n * ```\n */\nexport const nobr = (node) => {\n  return { disableLineBreakConversion: true, content: node.content };\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nexport const centerblock = (node) => {\n  const percentageInput = preprocessAttr(node.attrs)._default || \"50\";\n  return toNode(\"div\", { style: `margin: 0 auto; width: ${percentageInput}%` }, node.content);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nexport const check = (node) => {\n  const attrs = preprocessAttr(node.attrs)._default || \"dot\";\n  return toNode(\"div\", { class: `bb-check`, \"data-type\": attrs }, node.content);\n};\n","import { isStringNode } from \"@bbob/plugin-helper\";\nimport { preprocessAttr } from \"../utils/common\";\n\n/**\n * Class style tag\n *\n * [class=name]content[/class]\n * [class name=\"className\" state=\"psuedo-class\" minWidth=\"\" maxWidth=\"\"]content[/class]\n * [class name=\"className\" selector=\"\"]content[/class]\n */\nexport const classStyle = (node, options) => {\n  const attrs = preprocessAttr(node.attrs);\n  const nameAttr = attrs.name || attrs._default;\n\n  if (!options.data.previewing && !options.data.commonGUID) {\n    // create a common GUID for the post\n    // only applicable for div, style, and script tags\n    // this is to prevent the same class name from being used in different posts\n    options.data.commonGUID = \"post-\" + Math.random().toString(36).substring(2, 7);\n  }\n  const classSuffix = options.data.previewing ? \"preview\" : options.data.commonGUID;\n  const className = nameAttr + \"__\" + classSuffix;\n  const content = node.content\n    .filter(isStringNode)\n    .map((s) => s.replaceAll(\"{post_id}\", classSuffix).replaceAll(/[\\[\\]\\{\\}]/g, \"\"));\n  let selector = \"\";\n  const mediaQuery = [];\n  if (\n    [\"hover\", \"focus\", \"active\", \"focus-within\", \"focus-visible\"].includes(\n      attrs.state?.toLowerCase(),\n    )\n  ) {\n    selector = \":\" + attrs.state.toLowerCase();\n  }\n  if (attrs.selector) {\n    selector = attrs.selector.replace(/[,{}\\\\\\n]/g, \"\");\n  }\n  if (attrs.minWidth?.match(/^[0-9]+[a-z]+$/)) {\n    // @media (min-width: )\n    mediaQuery.push(`(min-width: ${attrs.minWidth})`);\n  }\n  if (attrs.maxWidth?.match(/^[0-9]+[a-z]+$/)) {\n    // @media (max-width: )\n    mediaQuery.push(`(max-width: ${attrs.maxWidth})`);\n  }\n\n  content.unshift(`.${className}${selector} {`);\n  content.push(\"}\");\n  if (mediaQuery.length) {\n    content.unshift(`@media ${mediaQuery.join(\" and \")} {`);\n    content.push(\"}\");\n  }\n  options.data.styles.push(content.join(\"\"));\n\n  return [];\n};\n","import { preprocessAttr } from \"../utils/common\";\n\n/**\n * processes [code] tag and returns a fenced code block\n */\nexport const code = (node) => {\n  const lang = preprocessAttr(node.attrs)._default || \"bbcode\";\n  return {\n    isWhitespaceSensitive: true,\n    content: [\"```\" + lang + \"\\n\", node.content, \"\\n```\\n\"],\n  };\n};\n\n/**\n * processes [icode] tag and returns inline code\n */\nexport const icode = (node) => {\n  return {\n    isWhitespaceSensitive: true,\n    content: [\"`\", node.content, \"`\"],\n  };\n};\n\n/**\n * Special tag to save newlines in code blocks. Used for hoisting code blocks\n */\nexport const savenl = (node) => {\n  return {\n    isWhitespaceSensitive: true,\n    content: node.content,\n  };\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nexport const color = (node) => {\n  const inputColor = preprocessAttr(node.attrs)._default || \"\";\n  if (inputColor.trim() === \"\") {\n    return node.content;\n  }\n  return toNode(\"span\", { style: `color: ${inputColor}` }, node.content);\n};\n","import { toNode } from \"../utils/common\";\n\n/**\n * @file Adds [comment] tag\n * @example [comment]Content[/comment]\n */\n\nconst comment = (node) => {\n  return toNode(\"span\", { class: \"hidden\" }, node.content);\n};\n\nexport { comment };\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Adds [div] tag\n * [div=css]Content[/div]\n * [div class=\"class\" style=\"css\"]Content[/div]\n */\nexport const div = (node, options) => {\n  if (node.gen) {\n    // node is actually a generated node \"div\" made by another tag\n    // don't process it\n    return node;\n  }\n  const attrs = preprocessAttr(node.attrs);\n  const style = attrs.style || attrs._default;\n  const classAttrs = attrs.class;\n  if (!classAttrs?.trim()) {\n    return toNode(\n      \"div\",\n      {\n        style,\n      },\n      node.content,\n    );\n  }\n\n  if (!options.data.previewing && !options.data.commonGUID) {\n    // create a common GUID for the post\n    // only applicable for div, style, and script tags\n    // this is to prevent the same class name from being used in different posts\n    options.data.commonGUID = \"post-\" + Math.random().toString(36).substring(2, 7);\n  }\n  const classSuffix = options.data.previewing ? \"preview\" : options.data.commonGUID;\n  const classNames = classAttrs\n    .split(\" \")\n    .map((c) => c + \"__\" + classSuffix)\n    .join(\" \");\n\n  return toNode(\n    \"div\",\n    {\n      class: classNames,\n      style,\n    },\n    node.content,\n  );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nexport const divide = (node) => {\n  const type = (preprocessAttr(node.attrs)._default || \"\").toLowerCase();\n  return toNode(\n    \"span\",\n    {\n      class: \"bb-divide\",\n      \"data-type\": type,\n    },\n    node.content\n  );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * @file Adds [fieldset] to bbcode\n * @example [fieldset=title]content[/fieldset]\n */\nexport const fieldset = (node) => {\n  const title = preprocessAttr(node.attrs)._default || \"\";\n  return toNode(\"fieldset\", { class: \"bb-fieldset\" }, [\n    toNode(\"legend\", { class: \"bb-fieldset-legend\" }, title),\n    toNode(\"div\", { class: \"bb-fieldset\" }, node.content),\n  ]);\n};\n","import { toNode } from \"../utils/common\";\n\n/**\n * @file Adds Header to bbcode\n * @example [h]content[/h], [h2]content[/h2], [h3]content[/h3],\n * [h4]content[/h4], [h5]content[/h5], [h6]content[/h6].\n */\n\nconst h = (node) => {\n  return toNode(\"h1\", {}, node.content);\n};\n\nconst h1 = (node) => {\n  return toNode(\"h1\", {}, node.content);\n};\n\nconst h2 = (node) => {\n  return toNode(\"h2\", {}, node.content);\n};\n\nconst sh = (node) => {\n  return toNode(\"h2\", {}, node.content);\n};\n\nconst h3 = (node) => {\n  return toNode(\"h3\", {}, node.content);\n};\n\nconst h4 = (node) => {\n  return toNode(\"h4\", {}, node.content);\n};\n\nconst h5 = (node) => {\n  return toNode(\"h5\", {}, node.content);\n};\n\nconst h6 = (node) => {\n  return toNode(\"h6\", {}, node.content);\n};\n\nexport { h, sh, h1, h2, h3, h4, h5, h6 };\n","import { toNode } from \"../utils/common\";\n/**\n * @file Adds [highlight] to bbcode\n * @example [highlight]content[/highlight]\n */\nexport const highlight = (node) => {\n  return toNode(\"span\", { class: \"bb-highlight\" }, node.content);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n/**\n * @file Adds [imagefloat] to bbcode\n * @exmaple [imagefloat=left]content[/imagefloat]\n */\nexport const imagefloat = (node) => {\n  const attrs = preprocessAttr(node.attrs)._default || \"\";\n  return toNode(\"div\", { class: `bb-float-${attrs}` }, node.content);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n/**\n * @file Adds [spoiler] and [inlinespoiler] to bbcode\n *\n * Defaults to \"Spoiler\" name if no title provided\n *\n * @example `[spoiler=Title]text[/spoiler]`\n * @example `[inlinespoiler]hidden content[/inlinespoiler]\n */\n\nexport const spoiler = (node) => {\n  const providedTitle = preprocessAttr(node.attrs)._default;\n  const title = \"Spoiler\" + (providedTitle ? `: ${providedTitle}` : \"\");\n\n  /**\n   * <details class=\"bb-spoiler\">\n   *  <summary>Title</summary>\n   *  <div class=\"bb-spoiler-content\">\n   *    lorem ipsum\n   *  </div>\n   * </details>\n   */\n  return toNode(\"details\", { class: \"bb-spoiler\" }, [\n    toNode(\"summary\", {}, title),\n    toNode(\"div\", { class: \"bb-spoiler-content\" }, node.content),\n  ]);\n};\n\nexport const inlinespoiler = (node) => {\n  return toNode(\"span\", { class: \"bb-inline-spoiler\" }, node.content);\n};\n","import { toNode } from \"../utils/common\";\n\n/**\n * @file Adds [justify] to bbcode\n * @example [justify]content[/justify]\n */\nexport const justify = (node) => {\n  return toNode(\"div\", { class: \"bb-justify\" }, node.content);\n};\n","import { toNode } from \"../utils/common\";\n/**\n * @file Adds [newspaper] to bbcode\n * @example [newspaper]content[/newspaper]\n */\nexport const newspaper = (node) => {\n  return toNode(\"div\", { class: \"bb-newspaper\" }, node.content);\n};\n","import { toNode } from \"../utils/common\";\n/**\n * @file Adds [note] to bbcode\n * @example [note]content[/note]\n */\n\nexport const note = (node) => {\n  return toNode(\"div\", { class: \"bb-note\" }, [\n    toNode(\"div\", { class: \"bb-note-tape\" }, \"\"),\n    toNode(\"div\", { class: \"bb-note-content\" }, [\n      node.content,\n      toNode(\"div\", { class: \"bb-note-footer\" }, \"\"),\n    ]),\n  ]);\n};\n","import { toNode } from \"../utils/common\";\n\n/**\n * @file Adds [ooc] to bbcode\n * @example [ooc]content[/ooc]\n */\nexport const ooc = (node) => {\n  return toNode(\n    \"div\",\n    {\n      class: \"bb-ooc\",\n    },\n    node.content,\n  );\n};\n","import { toNode } from \"../utils/common\";\n/**\n * @file Adds [pindent] to bbcode\n * @example [pindent]content[/pindent]\n */\nexport const pindent = (node) => {\n  return toNode(\"span\", { class: \"bb-pindent\" }, node.content);\n};\n","/**\n * [plain] bbcode tag that prevents parsing of inner tags\n * @example\n * ```\n * [plain]This is [b]bold[/b] and [i]italic[/i][/plain]\n * ```\n * outputs to\n * ```\n * This is [b]bold[/b] and [i]italic[/i]\n * ```\n */\nexport const plain = (node) => {\n  return node.content;\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Add [print] tag\n * @example [print=lined]content[/print]\n */\nexport const print = (node) => {\n  const defaultOp = \"print\";\n  const printAttr = (preprocessAttr(node.attrs)._default || defaultOp).toLowerCase();\n\n  const OPTIONS = [\"print\", \"line\", \"graph\", \"parchment\"];\n\n  // Default to print if option is not valid\n  const printOption = OPTIONS.includes(printAttr) ? printAttr : defaultOp;\n\n  return toNode(\n    \"div\",\n    { class: printOption === defaultOp ? `bb-print` : `bb-print-${printOption}` },\n    node.content,\n  );\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * @file Adds [progress] to bbcode\n * @exmaple [progress=percentageInt]content[/progress]\n */\nexport const progress = (node) => {\n  const percentageInt = preprocessAttr(node.attrs)._default;\n  return toNode(\"div\", { class: \"bb-progress\" }, [\n    toNode(\"div\", { class: \"bb-progress-text\" }, node.content),\n    toNode(\"div\", { class: \"bb-progress-bar\", style: `width: calc(${percentageInt}% - 6px)` }, \"\"),\n    toNode(\"div\", { class: \"bb-progress-bar-other\" }, \"\"),\n  ]);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * @file Adds [thinprogress] to bbcode\n * @exmaple [thinprogress=percentageInt]content[/progthinprogressress]\n */\nexport const thinprogress = (node) => {\n  const percentageInt = preprocessAttr(node.attrs)._default;\n  return toNode(\"div\", { class: \"bb-progress-thin\" }, [\n    toNode(\"div\", { class: \"bb-progress-text\" }, node.content),\n    toNode(\"div\", { class: \"bb-progress-bar\", style: `width: calc(${percentageInt}% - 6px)` }, \"\"),\n    toNode(\"div\", { class: \"bb-progress-bar-other\" }, \"\"),\n  ]);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\n/**\n * Parse the user provided height and return a valid height value\n * @param {Number} heightValue obtains the input of the user entered height (default is 700)\n * @returns A validated number less than 0.\n */\nfunction parseHeight(heightValue) {\n  const maxHeight = 700;\n  const parsedHeight =\n    heightValue && heightValue.trim() !== \"\" ? heightValue.replace(/[^\\d.]/g, \"\") : 0;\n\n  if (parsedHeight && parsedHeight >= 0 && parsedHeight <= maxHeight) {\n    return parsedHeight;\n  } else {\n    // if the value = 0 then nothing will be returned\n    return parsedHeight === 0 ? 0 : maxHeight;\n  }\n}\n\n/**\n * @file Adds [scroll] to bbcode\n * @example [scroll]content[/scroll]\n */\nexport const scroll = (node) => {\n  const attrs = preprocessAttr(node.attrs)._default;\n  const heightInput = parseHeight(attrs);\n  return toNode(\"div\", { class: \"bb-scroll\", style: `height: ${heightInput}px` }, node.content);\n};\n","import { preprocessAttr, toNode } from \"../utils/common\";\n\nexport const side = (node) => {\n  const attrs = preprocessAttr(node.attrs)._default || \"left\";\n  return toNode(\"div\", { class: \"bb-side\", \"data-side\": attrs }, node.content);\n};\n","import { toNode } from \"../utils/common\";\n\n/**\n * @file Adds subscript to BBCode\n * @example [sub]content[/sub]\n */\n\nconst sub = (node) => {\n  return toNode(\"sub\", {}, node.content);\n};\n\nexport { sub };\n","import { toNode } from \"../utils/common\";\n\n/**\n * @file Adds superscript to bbcode\n * @example [sup]content[/sup]\n */\n\nconst sup = (node) => {\n  return toNode(\"sup\", {}, node.content);\n};\n\nexport { sup };\n","import { generateGUID, preprocessAttr, toNode, toOriginalStartTag } from \"../utils/common\";\nimport { isTagNode } from \"@bbob/plugin-helper\";\n\n/**\n * @file Adds [tabs][tab] to bbcode\n * @example [tabs][tab=name 1]content[/tab][tab=name 2]content[/tab][/tabs]\n */\nexport const tabs = (node) => {\n  const tabsList = node.content.filter(\n    (contentNode) => isTagNode(contentNode) && contentNode.tag === \"tab\",\n  );\n  const groupId = generateGUID();\n  tabsList.forEach((tabNode) => {\n    tabNode.isValid = true;\n    tabNode.groupId = groupId;\n  });\n  if (!tabsList.length) {\n    // no [tab] tags found\n    return [toOriginalStartTag(node), ...node.content, node.toTagEnd()];\n  }\n  tabsList[0].open = true;\n\n  return toNode(\n    \"div\",\n    {\n      class: \"bb-tabs\",\n    },\n    tabsList,\n  );\n};\n\n/**\n * [tab=name]content[/tab]\n * [tab name=\"name\" style=\"style\"]content[/tab]\n */\nexport const tab = (node) => {\n  if (!node.isValid) {\n    // not inside a [tabs] tag\n    return [toOriginalStartTag(node), ...node.content, node.toTagEnd()];\n  }\n  const attrs = preprocessAttr(node.attrs);\n  const name = attrs._default || attrs.name || \"Tab\";\n  const tabId = `tab-${name.replace(/\\W/g, \"_\")}-${generateGUID()}`;\n  return [\n    toNode(\"input\", {\n      type: \"radio\",\n      id: tabId,\n      name: \"tab-group-\" + node.groupId,\n      class: \"bb-tab\",\n      checked: node.open,\n    }),\n    toNode(\n      \"label\",\n      {\n        class: \"bb-tab-label\",\n        for: tabId,\n        style: attrs.style,\n      },\n      name,\n    ),\n    toNode(\n      \"div\",\n      {\n        class: \"bb-tab-content\",\n      },\n      node.content,\n    ),\n  ];\n};\n","/**\n * @file discourse-core-replacement.js\n * This is a dedicated file for replacing the standard Discourse BBCode tags in core.\n * In the markdown-it engine, discourse has added these bbcode tags in the inline parser.\n * However this means that if the parser detects a block level tag inside an inline tag,\n * it will not parse the inline tag.\n *\n * This file is meant to fix such scenarios by doing the parsing of bbcode tags for it.\n *\n * @example\n * [b][h]bold[/h][/b]   // this should properly parse the bold tag inside the h tag\n *\n * https://github.com/discourse/discourse/blob/d7ece61252d7671a1f124483836279b99852c08c/app/assets/javascripts/discourse-markdown-it/src/features/bbcode-inline.js\n */\nimport { toNode } from \"../utils/common\";\n\nexport const bold = (node) => {\n  return toNode(\"span\", { class: \"bbcode-b\" }, node.content);\n};\n\nexport const italic = (node) => {\n  return toNode(\"span\", { class: \"bbcode-i\" }, node.content);\n};\n\nexport const underline = (node) => {\n  return toNode(\"span\", { class: \"bbcode-u\" }, node.content);\n};\n\nexport const strike = (node) => {\n  return toNode(\"span\", { class: \"bbcode-s\" }, node.content);\n};\n","import { MD_NEWLINE_INJECT, MD_NEWLINE_INJECT_COMMENT, MD_NEWLINE_PRE_INJECT } from \"./common\";\n\n/**\n * Post Processing designed to fix issues with Markdown and BBCode that the parser can't fix.\n *\n * Separate from markdown-it post processing as it'll be able to manipulate the full string.\n * @param {string} raw string from processing through both BBCode and Markdown\n * @returns post processed string\n */\nfunction removeNewlineInjects(raw) {\n  const processed = raw\n    .replaceAll(MD_NEWLINE_INJECT, \"\")\n    .replaceAll(MD_NEWLINE_PRE_INJECT, \"\")\n    .replaceAll(\"\\n\" + MD_NEWLINE_INJECT_COMMENT, \"\")\n    .replaceAll(MD_NEWLINE_INJECT_COMMENT + \"\\n\", \"\")\n    .replaceAll(MD_NEWLINE_INJECT_COMMENT, \"\"); // Remove all instances of the injected newline\n  return processed;\n}\n\n/**\n * Injects hoisted code blocks back into the raw string\n * @param {string} raw input to inject hoisted code blocks into\n * @param {any} data contains hoist map\n * @returns string with hoisted code blocks injected\n */\nfunction renderHoistedCodeBlocks(raw, data) {\n  const hoistMap = data.hoistMap;\n  for (const [uuid, content] of Object.entries(hoistMap)) {\n    raw = raw.replaceAll(uuid, content);\n  }\n  return raw;\n}\n\n/**\n * Setups the class style tag template for the post\n * @param {string} raw\n * @param {{styles: string[]}} data - contains styles array\n * @returns string\n */\nfunction createClassStyleTagTemplate(raw, data) {\n  if (data.styles.length === 0) {\n    return raw;\n  }\n  const template = '<template data-bbcode-plus=\"class\">' + data.styles.join(\"\\n\") + \"</template>\";\n  return template + raw;\n}\n\n/**\n * Setups the script tag template for the post\n * @param {string} raw\n * @param {{\n *  bbscripts: {\n *    id: string,\n *    class: string,\n *    on: string,\n *    version: string,\n *    content: string\n *  }[]}} data - contains scripts array\n * @returns string\n */\nfunction createScriptTagTemplate(raw, data) {\n  if (data.bbscripts.length === 0) {\n    return raw;\n  }\n  const templates = data.bbscripts.map(\n    (s) =>\n      `<template data-bbcode-plus=\"script\" data-bbscript-id=\"${s.id}\" data-bbscript-class=\"${s.class}\" data-bbscript-on=\"${s.on}\" data-bbscript-ver=\"${s.version}\">${s.content}</template>`,\n  );\n  return templates.join(\"\") + raw;\n}\n\n/**\n * Performs post processing on the raw string to address any necessary functionality that BBob/MD can't handle with a plugin (i.e. hoisting).\n * @param {string} raw processed input from after bbob and md\n * @param {any} data from bbob data\n * @returns final processed string\n */\nexport function postprocess(raw, data) {\n  let final = raw;\n  const postprocessors = [\n    removeNewlineInjects,\n    createClassStyleTagTemplate,\n    createScriptTagTemplate,\n    renderHoistedCodeBlocks,\n  ];\n  for (const postprocessor of postprocessors) {\n    final = postprocessor(final, data);\n  }\n  return final;\n}\n","import { ESCAPABLES_REGEX, MD_TABLE_REGEX, generateGUID, regexIndexOf } from \"./common\";\n\n/**\n * Find all code blocks and hoist them out of the content and into a map for later insertion\n * @param {string} raw input to preprocess\n * @returns processed string and hoist map\n */\nfunction fenceCodeBlockPreprocess(content, data) {\n  /** @type {Object.<string, string>} */\n  const hoistMap = {};\n  let index = 0;\n\n  const addHoistAndReturnNewStartPoint = (cutOffStart, cutOffEnd, expected, trim = false) => {\n    const uuid = generateGUID();\n    if (cutOffEnd !== -1) {\n      hoistMap[uuid] = content.substring(cutOffStart, cutOffEnd);\n      content = content.substring(0, cutOffStart) + uuid + content.substring(cutOffEnd);\n    } else {\n      hoistMap[uuid] = content.substring(cutOffStart);\n      content = content.substring(0, cutOffStart) + uuid + expected;\n    }\n    if (trim) {\n      if (hoistMap[uuid].startsWith(\"\\n\")) {\n        hoistMap[uuid] = hoistMap[uuid].substring(1);\n      }\n      if (hoistMap[uuid].endsWith(\"\\n\")) {\n        hoistMap[uuid] = hoistMap[uuid].substring(0, hoistMap[uuid].length - 1);\n      }\n    }\n    return cutOffStart + uuid.length + expected.length;\n  };\n\n  while ((index = regexIndexOf(content, ESCAPABLES_REGEX, index)) !== -1) {\n    const match = ESCAPABLES_REGEX.exec(content.substring(index));\n    if (match.groups?.fence) {\n      const fence = match.groups.fence;\n      const fenceInfo = match.groups.fenceInfo;\n      if (content[index] === \"\\n\") {\n        // Check if the fence is not at the start of the content\n        index += 1;\n      }\n      const closingFenceRegex = new RegExp(\"\\n\" + fence + \"(\\n|$)\"); // Find the next fence. By commonmark spec, it should be the same fence length and type\n      const nextIndex = regexIndexOf(content, closingFenceRegex, index + fence.length);\n\n      const uuid = generateGUID();\n      if (nextIndex !== -1) {\n        hoistMap[uuid] = content.substring(index + fence.length + fenceInfo.length, nextIndex);\n      } else {\n        hoistMap[uuid] = content.substring(index + fence.length + fenceInfo.length);\n      }\n      // inject bbcode tag before and after the code block. This is to prevent BBob plugin from injecting newlines\n      const replacement = `[saveNL]\\n${fence}${fenceInfo}${uuid}\\n${fence}\\n[/saveNL]`;\n      content =\n        content.substring(0, index) +\n        replacement +\n        (nextIndex !== -1 ? content.substring(nextIndex + 1 + fence.length) : \"\");\n      index = index + replacement.length;\n    } else if (match.groups?.bbcode) {\n      const bbcode = match.groups.bbcode;\n      const bbcodeTag = match.groups.bbcodeTag.toLowerCase(); // coerce to lowercase for caseinsensitive matching\n      const closingTag = `[/${bbcodeTag}]`;\n      const nextIndex = content.toLowerCase().indexOf(closingTag, index + 1);\n      index = addHoistAndReturnNewStartPoint(index + bbcode.length, nextIndex, closingTag, true);\n    } else if (match.groups.backtick) {\n      const backtick = match.groups.backtick; // contains whole content\n      const tickStart = match.groups.tickStart;\n      const tickEnd = match.groups.tickEnd;\n      index = addHoistAndReturnNewStartPoint(\n        index + tickStart.length,\n        index + backtick.length - tickEnd.length,\n        tickEnd,\n      );\n    }\n  }\n\n  data.hoistMap = hoistMap;\n  return [content, data];\n}\n\n/**\n * Find all markdown table blocks and mark them to ignore newlines\n * @param {string} raw input to preprocess\n * @returns processed string\n */\nfunction mdTableBlockPreprocess(content, data) {\n  let index = 0;\n  while ((index = regexIndexOf(content, MD_TABLE_REGEX, index)) !== -1) {\n    const match = MD_TABLE_REGEX.exec(content.substring(index));\n    const table = match[0];\n    const replacement = `[saveNL]\\n${table}\\n[/saveNL]`;\n    content = content.substring(0, index) + replacement + content.substring(index + table.length);\n    index = index + replacement.length;\n  }\n  return [content, data];\n}\n\n/**\n * Preprocesses input to be formatted for bbob to intake. Handles any necessary functionality that BBob can't handle with a plugin (i.e. hoisting).\n * @param {string} raw input to preprocess\n * @returns formatted input for bbob to intake\n */\nexport function preprocessRaw(raw) {\n  let data = {};\n  const preprocessors = [fenceCodeBlockPreprocess, mdTableBlockPreprocess];\n  for (const preprocessor of preprocessors) {\n    [raw, data] = preprocessor(raw, data);\n  }\n  return [raw, data];\n}\n","import bbob from \"@bbob/core\";\nimport { render } from \"@bbob/html\";\nimport { lineBreakPlugin } from \"./plugins/lineBreak\";\nimport { preserveWhitespace } from \"./plugins/preserveWhitespace\";\nimport { availableTags, preset, preventParsing } from \"./preset\";\nimport { postprocess } from \"./utils/postprocess\";\nimport { preprocessRaw } from \"./utils/preprocess\";\n\nconst options = {\n  onlyAllowTags: [...availableTags],\n  contextFreeTags: preventParsing, // prevent parsing of children\n  enableEscapeTags: true,\n  onError: (err) => {\n    if (options.previewing) {\n      // eslint-disable-next-line no-console\n      console.warn(err.message, err.lineNumber, err.columnNumber);\n    }\n  },\n};\nconst presetTags = preset();\n\nexport const RpNBBCode = (code, opts) => {\n  const plugins = [presetTags];\n  if (opts.preserveWhitespace) {\n    plugins.push(preserveWhitespace());\n  }\n  plugins.push(lineBreakPlugin());\n  const [preprocessed, preprocessedData] = preprocessRaw(code);\n  return bbob(plugins).process(preprocessed, {\n    render,\n    ...options,\n    data: {\n      ...preprocessedData,\n      previewing: opts.previewing,\n      fonts: new Set(),\n      styles: [],\n      bbscripts: [],\n    },\n  });\n};\n\nexport { postprocess };\n"],"names":["N","TAB","EQ","QUOTEMARK","SPACE","OPEN_BRAKET","CLOSE_BRAKET","SLASH","BACKSLASH","isTagNode","el","isStringNode","keysReduce","obj","reduce","def","Object","keys","acc","key","getNodeLength","node","Array","isArray","content","count","contentNode","String","length","escapeAttrValue","value","replace","attrValue","name","JSON","stringify","attrsToString","values","arr","join","getTagAttrs","tag","params","uniqAttr","res","tagAttr","attrs","TagNode","attr","this","append","push","appendToNode","toTagStart","openTag","closeTag","toTagEnd","toTagNode","toLowerCase","toString","r","renderContent","tagStart","create","isOf","type","constructor","TOKEN_TYPE_ID","getTokenValue","token","isTagEnd","charCodeAt","Token","isEmpty","isNaN","isText","isTag","isAttrName","isAttrValue","isStart","isEnd","getName","slice","getTagName","getValue","getLine","getColumn","text","tokenToText","row","col","TYPE_WORD","TYPE_TAG","TYPE_ATTR_NAME","TYPE_ATTR_VALUE","TYPE_SPACE","TYPE_NEW_LINE","CharGrabber","skip","num","silent","c","pos","o","onSkip","hasNext","len","getCurr","s","getRest","substring","getNext","nextPos","getPrev","prevPos","isLast","includes","val","indexOf","grabWhile","condition","start","grabN","substrUntilChar","char","idx","source","options","createCharGrabber","EM","STATE_WORD","STATE_TAG","STATE_TAG_ATTRS","TAG_STATE_NAME","TAG_STATE_ATTR","TAG_STATE_VALUE","WHITESPACES","SPECIAL_CHARS","isWhiteSpace","isEscapeChar","isSpecialChar","isNewLine","unq","str","charToRemove","charAt","trimChar","createLexer","buffer","tokenIndex","stateMode","tagMode","contextFreeTag","tokens","Math","floor","escapeTags","enableEscapeTags","contextFreeTags","filter","Boolean","map","nestedMap","Map","onToken","RESERVED_CHARS","NOT_CHAR_TOKENS","isCharReserved","isCharToken","isEscapableChar","checkContextFreeMode","isClosingTag","chars","emitToken","cl","createTokenOfType","nextTagState","tagChars","isSingleValueTag","validAttrName","isValue","stateSpecial","validAttrValue","isQM","prevChar","nextChar","isPrevSLASH","isNextEQ","isWS","isNextWS","stateTag","currChar","substr","hasInvalidChars","isNoAttrsInTag","stateAttrs","tagStr","tagGrabber","hasSpace","stateWord","word","fullTagLen","fullTagName","isChar","tokenize","isTokenNested","has","get","status","set","NodeList","last","n","flush","pop","toArray","createList","parse","input","opts","onlyAllowTags","tokenizer","nodes","nestedNodes","tagNodes","tagNodesAttrName","nestedTagsMap","Set","isTagNested","tagName","flushTagNodes","getNodes","lastNestedNode","appendNodeAsString","isNested","forEach","item","appendNodes","handleTagStart","tagNode","add","handleTag","onError","line","column","lineNumber","columnNumber","handleTagEnd","lexer","createTokenizer","activeTagNode","tokenValue","attrName","handleNode","isObj","isBool","iterate","t","cb","tree","same","expected","actual","every","exp","some","call","act","ao","eo","C1","C2","createTree","extendedTree","messages","walk","match","expr","expression","process","env","NODE_ENV","SELFCLOSE_END_TAG","CLOSE_START_TAG","START_TAG","END_TAG","renderNode","stripTags","render","toNode","gen","preprocessAttr","vals","_default","toOriginalStartTag","regexIndexOf","string","regex","startpos","search","MD_NEWLINE_INJECT","MD_NEWLINE_PRE_INJECT","MD_NEWLINE_INJECT_COMMENT","URL_REGEX_SINGLE_LINE","RegExp","ESCAPABLES_REGEX","MD_TABLE_REGEX","generateGUID","d","Date","getTime","window","performance","now","random","isString","disableLineBreakConversion","unshift","child","splice","isWhitespaceSensitive","test","trim","numSpaces","fromCharCode","repeat","tags","core","tagCallback","alignment","left","class","center","right","anchor","a","id","goto","href","WEB_FONTS","VALID_FONT_STYLES","thin","extralight","light","regular","medium","semibold","bold","extrabold","black","REGISTERED_AXIS","AXES_REGEX","emailHeader","emailFooter","rowcolumn","columnAttrs","columnStyle","startsWith","ACCEPTED_OPTIONS","textmessage","recipient","message","option","SLIDE_TITLE_OPEN","Symbol","SLIDE_TITLE_CLOSE","SLIDE_CLOSE","SLIDE_REGEX","markerToString","marker","accordionTags","accordion","groupId","markedContent","contentArr","newArr","shift","foundIndex","preContent","postContent","groups","slideTitleOpen","slideTitleClose","slideClose","generateSlideMarkersFromContent","generatedSlides","currentSlide","prevMarker","customTitle","generateSlidesFromMarkers","filteredContent","isValid","customSettings","split","bright","bcenter","bleft","fleft","fright","endsWith","width","find","classes","style","slide","title","isOpen","open","titleAlign","possibleOptions","EVENTS","animation","data","previewing","commonGUID","commonId","keyframes","ident","cleanContent","replaceAll","formatted","styles","bg","color","block","defaultOp","blockAttr","blockOption","blockquote","author","border","br","centerblock","percentageInput","check","nameAttr","classSuffix","className","selector","mediaQuery","state","minWidth","maxWidth","code","inputColor","comment","div","classAttrs","classNames","divide","fieldset","font","fontFamily","family","axes","ital","wght","matches","exec","italic","weight","named_weight","fromEntries","entries","axesParser","url","sort","googleFontApiBuild","fonts","custom","fontVar","h","h1","h2","h3","h4","h5","h6","heightrestrict","heightInput","heightValue","parsedHeight","parseHeight","highlight","icode","imagefloat","inlinespoiler","justify","keyframe","mail","attributes","mailAttr","mailOption","person","subject","newspaper","nobr","note","ooc","pindent","plain","print","printAttr","printOption","progress","percentageInt","thinprogress","savenl","sh","script","onEvent","on","scriptSetup","version","bbscripts","scroll","side","size","fontSize","fontValue","valid","parsedSize","sizeRanges","unit","parseFontSize","outputAttr","spoiler","providedTitle","sub","sup","tab","tabId","checked","for","tabs","tabsList","tabNode","b","i","u","availableTags","preset","createPreset","defTags","processor","presetFactory","presetExecutor","assign","extend","callback","removeNewlineInjects","raw","renderHoistedCodeBlocks","hoistMap","uuid","createClassStyleTagTemplate","createScriptTagTemplate","fenceCodeBlockPreprocess","index","addHoistAndReturnNewStartPoint","cutOffStart","cutOffEnd","fence","fenceInfo","closingFenceRegex","nextIndex","replacement","bbcode","closingTag","bbcodeTag","backtick","tickStart","tickEnd","mdTableBlockPreprocess","table","err","console","warn","presetTags","plugins","preserveWhitespace","preprocessed","preprocessedData","preprocessors","preprocessor","preprocessRaw","plugs","mockRender","skipParse","parser","parseFn","renderFn","Error","plugin","newTree","html","bbob","final","postprocessors","postprocessor"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,15]}