/** @typedef {import('./AST').ASTNode} ASTNode */
/** @typedef {import('./utils').BBScriptFuncMap} BBScriptFuncMap */

/**
 * @typedef {Object} BBScriptOptions
 * @property {string} callerId
 * @property {string} callerClass
 * @property {any} data
 * @property {BBScriptProcessor} processor
 * @property {Element} target
 */

export class BBScriptProcessor {
  /** @type {BBScriptOptions} */
  options;
  /** @type {BBScriptFuncMap} */
  functions;

  /**
   * @param {BBScriptFuncMap} functions
   * @param {BBScriptOptions} [defaultOptions={} as BBScriptOptions]
   */
  constructor(functions, defaultOptions = {}) {
    defaultOptions = {
      ...defaultOptions,
      processor: this,
    };
    this.options = defaultOptions;
    this.functions = functions;
  }
  /**
   * Processes and executes all commands in node tree
   * @param {ASTNode[]} nodeTree input node tree, generated by `parse()`
   * @param {string} callerId
   * @param {string} callerClass
   * @param {BBScriptOptions} [options=this.options] options to use
   * @returns {void}
   */
  execAll(nodeTree, callerId, callerClass, options = this.options) {
    options = {
      ...this.options,
      ...options,
      callerId,
      callerClass,
    };
    for (const node of nodeTree) {
      node.resolveValue(options);
    }
  }
}
